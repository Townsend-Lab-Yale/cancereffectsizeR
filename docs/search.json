[{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/MAF_filtering_tips.html","id":"filtering-to-reduce-false-positive-variants","dir":"Articles","previous_headings":"","what":"Filtering to reduce false positive variants","title":"MAF filtering and sample validation","text":"Well-curated data, MAF files produced using Genomic Data Commons Aliquot Ensemble Somatic Variant Merging Masking workflow, need quality filtering. data produced unknown somatic calling methods, reading MAF file preload_maf() provides three relevant annotation columns: germline_variant_site: variant overlaps region contains common germline variant according gnomAD (common >1% prevalence population). repetitive_region: variant region genome marked repetitive RepeatMasker tool. cosmic_site_tier: Indicates variant overlaps site annotated cancer-related (tiers 1, 2, 3) COSMIC. simple strategy reduce false positive calls filter germline site records, well records repetitive regions except COSMIC annotations. can apply filtering like :","code":"library(cancereffectsizeR) maf = preload_maf(\"my_data.maf\", refset = \"ces.refset.hg38\") # also works with ces.refset.hg19 maf = maf[germline_variant_site == F][repetitive_region == F | cosmic_site_tier %in% 1:3]"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/MAF_filtering_tips.html","id":"sample-re-use-contamination-and-multi-sample-sequencing","dir":"Articles","previous_headings":"","what":"Sample re-use, contamination, and multi-sample sequencing","title":"MAF filtering and sample validation","text":"combining data sources, ’s important verify patient’s mutation data duplicated. Since can hard sure, recommend careful manual curation use check_sample_overlap() flag possible sample overlap. Sometimes, patients data source show suspiciously high mutational overlap. due shared calling error, worse, contamination samples sequencing. latter appears likely, data used. Relatedly, patients multiple distinct sequenced samples (multi-region sequencing, multiple timepoints) contribute just one sample effect analysis, unless evidence tissues evolved independently (unusual).","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/MAF_filtering_tips.html","id":"what-not-to-filter","dir":"Articles","previous_headings":"","what":"What not to filter","title":"MAF filtering and sample validation","text":"don’t apply filters targeted gene sequencing data sets, since presumably come high-depth sequencing cancer hotspots. allow complete picture mutational processes present tissues mutation rate estimation, whole-exome/whole-genome variants filtered sort functional criteria. One thing watch : Occasionally, researchers leave synonymous variants publishing study data. synonymous variants essential calculating neutal gene mutation rates, must included WXS/WGS data.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Tutorial","text":"Start installing latest release: Regrettably, bug older versions GenomeInfoDb package may produce cryptic error messages cancereffectsizeR, along lines !anyNA(m32) TRUE. encounter issue, upgrade Bioconductor version: addition installing cancereffectsizeR, need install reference data set, refset. refsets include genomic gene annotations, mutational signature definitions, . Currently, refsets supporting hg38 hg19 builds human genome available separate data packages. (want build refset use custom genome build gene set almost species, can.) tutorial, ’ll use hg38 refset package. Restart R/RStudio installation. continuing, may want create directory tutorial store data output one place.","code":"# Some dependencies are large, so we increase the download time limit to be safe options(timeout = 600) install.packages(\"remotes\") remotes::install_github(\"Townsend-Lab-Yale/cancereffectsizeR\", dependencies = TRUE) # Only necessary if the current Bioconductor version is <3.14. if (BiocManager::version() < as.package_version(\"3.14\")) {   BiocManager::install(version = \"3.14\") # or newer, if desired } options(timeout = 600) remotes::install_github(\"Townsend-Lab-Yale/ces.refset.hg38@*release\") # setwd() somewhere, if desired dir.create(\"CES_tutorial\") setwd(\"CES_tutorial\")"},{"path":[]},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"theoretical-overview","dir":"Articles","previous_headings":"Quickstart","what":"Theoretical overview","title":"Tutorial","text":"briefly, extract mutational signatures sample’s SNV mutation profile using MutationalPatterns. relative weights biologically associated signatures used infer trinucleotide-context-specific relative rates SNV mutations sample. Cohort-wide neutral gene mutation rates calculated dNdScv, tissue-specific covariates provided ces.refset.hg38. Combining information, rate neutral mutation particular variant site calculated partitioning gene mutation rate across sites gene accordance signature-informed relative rates. Comparing rates observed expected mutation model somatic selection allows inference selection intensity, call cancer effect size.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"example-lung-adenocarcinoma-data-from-tcga","dir":"Articles","previous_headings":"Quickstart","what":"Example: Lung adenocarcinoma data from TCGA","title":"Tutorial","text":"want skip details run -frills cancereffectsizeR analysis now, see . Otherwise, take peek get sense ’s come, keep reading thorough walkthrough.","code":"library(cancereffectsizeR) library(data.table) library(ggplot2)  # Download TCGA lung adenocarcinoma (LUAD) somatic variant data. tcga_maf_file <- \"TCGA-LUAD.maf.gz\" if (!file.exists(tcga_maf_file)) {   get_TCGA_project_MAF(project = \"LUAD\", filename = \"TCGA-LUAD.maf.gz\") }  # Prepare data maf <- preload_maf(maf = tcga_maf_file, refset = \"ces.refset.hg38\")  # Create cancereffectsizeR analysis and load data cesa <- CESAnalysis(refset = \"ces.refset.hg38\") cesa <- load_maf(cesa = cesa, maf = maf)  # Infer trinculeotide-context-specific relative rates of SNV mutation from # a mutational signature analysis (leaving out signatures not found in LUAD) signature_exclusions <- suggest_cosmic_signature_exclusions(cancer_type = \"LUAD\", treatment_naive = TRUE) cesa <- trinuc_mutation_rates(   cesa = cesa, signature_set = ces.refset.hg38$signatures$COSMIC_v3.2,   signature_exclusions = signature_exclusions )  # Estimate neutral gene mutation rates using dNdScv, with tissue-specific mutation rate covariates. cesa <- gene_mutation_rates(cesa, covariates = ces.refset.hg38$covariates$lung)  # Infer scaled selection coefficients under the default model of clonal selection. # By default, inference is restricted to recurrent mutations. cesa <- ces_variant(cesa)  # Take top 15 variants, then sort lowest to highest (to plot left to right) selection <- cesa$selection[[1]] top <- selection[order(-selection_intensity)][1:15] top <- top[order(selection_intensity)]  # Plot top effects top[, display_name := gsub(\"_\", \"\\n\", variant_name)] top[, display_levels := factor(display_name, levels = display_name, ordered = T)] plot_title <- \"Top cancer effects in TCGA LUAD\" breaks <- unique(as.numeric(round(quantile(top$included_with_variant))))  ggplot(top, aes(x = display_levels, y = selection_intensity)) +   geom_errorbar(aes(ymin = ci_low_95, ymax = ci_high_95), width = .2, color = \"darkgrey\") +   geom_point(aes(color = included_with_variant), size = 3) +   scale_x_discrete() +   scale_y_log10(labels = function(x) format(x, big.mark = \",\", scientific = F)) +   scale_color_viridis_c(     name = \"variant prevalence\", guide = \"colorbar\", trans = \"log10\",     option = \"plasma\", breaks = breaks   ) +   xlab(element_blank()) +   ylab(expression(\"cancer effect\" ~ scriptstyle(~ ~ (log[10])))) +   ggtitle(plot_title) +   guides(color = guide_colourbar(ticks = FALSE)) +   theme_minimal() +   theme(     text = element_text(family = \"Verdana\"),     axis.title.x = element_text(size = 14),     axis.text.x = element_text(size = 8),     legend.position = \"bottom\",     legend.title = element_text(size = 10),     panel.grid.major.x = element_blank(),     panel.grid.minor.x = element_blank()   )  # There's lots more that can be done with cancereffectsizeR! See the full tutorial for some # useful details and a broader view of functionality."},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"preparing-data","dir":"Articles","previous_headings":"","what":"Preparing data","title":"Tutorial","text":"Load cancereffectsizeR, well data.table package. cancereffectsizeR makes extensive use data tables, ’s handy package loaded. tutorial, ’ll use somatic variant data produced exome sequencing TCGA BRCA (breast carcinoma) project. supplement WXS data targeted sequencing data Metastatic Breast Cancer data set hosted cBioPortal. cancereffectsizeR, data can combined multiple whole-exome, whole-genome, targeted sequencing sources, although always need least one WXS WGS source anchor analysis. Targeted sequencing data can’t used mutation rate inference: mutations, typically, since ’re mostly cancer hotspots, don’t provide baseline mutation rates like absence selection. Instead, mutation rates TGS samples assumed similar calculated WXS/WGS samples.","code":"library(cancereffectsizeR) library(data.table)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"tcga-data-whole-exome","dir":"Articles","previous_headings":"Preparing data","what":"TCGA data (whole-exome)","title":"Tutorial","text":"’ll begin downloading variant data TCGA. function downloads patient MAF data latest TCGA data release assembles project-level MAF. Let’s also load examine table patient information. Although TCGA samples data set taken primary tumors, ’ll see patients presented metastatic disease (pM = M1). Hormone receptor status (progesterone estrogen receptor positive) HER2 amplification status also recorded combined column. preload_maf() function takes MAF data, extracts columns needed cancereffectsizeR, adds couple genomic annotations, checks common problems. (analyses, see MAF data tips.) MAF file already uses hg38 genome build, didn’t, use chain_file argument convert records via liftOver. MAFs created fed , TCGA sample replicates effectively merged, since Unique_Patient_Identifier column supersedes Tumor_Sample_Barcode (original sample identifiers). see note preload_maf() caught handled ensuing duplicate mutation records.","code":"tcga_maf_file <- \"TCGA-BRCA.maf.gz\" if (!file.exists(tcga_maf_file)) {   get_TCGA_project_MAF(project = \"BRCA\", filename = tcga_maf_file) } tcga_clinical <- fread(system.file(\"tutorial/TCGA_BRCA_clinical.txt\", package = \"cancereffectsizeR\"))  # Change patient identifier column name in clinical table to match the MAF. setnames(tcga_clinical, \"patient_id\", \"Unique_Patient_Identifier\")  # Peek at data tcga_clinical[1:5] ##    Unique_Patient_Identifier   pM receptor_status ## 1:              TCGA-3C-AAAU <NA>       HR+/HER2- ## 2:              TCGA-3C-AALI   M0       HR+/HER2+ ## 3:              TCGA-3C-AALJ   M0            <NA> ## 4:              TCGA-3C-AALK   M0       HR+/HER2+ ## 5:              TCGA-4H-AAAK   M0            <NA> tcga_maf <- preload_maf(maf = tcga_maf_file, refset = \"ces.refset.hg38\")"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"metastatic-data-tgs","dir":"Articles","previous_headings":"Preparing data","what":"Metastatic data (TGS)","title":"Tutorial","text":"TGS data source (hosted cBioPortal recently published Cancer Discovery), consists metastatic tumors sequenced using various MSK-Impact panels. full data set, patients multiple samples sequenced; data provided package subsetted one sample per patient, genome build converted hg38. combining data multiple sources, check_sample_overlap() can detect unexpected sample duplication. feed tcga_maf tgs_maf filter output variants_shared > 2 (panel data, couple shared variants doesn’t imply sample duplication), ’ll see everything looks fine.","code":"tgs_maf_file <- system.file(\"tutorial/metastatic_breast_2021_hg38.maf\", package = \"cancereffectsizeR\") tgs_maf <- preload_maf(maf = tgs_maf_file, refset = \"ces.refset.hg38\")"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"create-cesanalysis-and-load-data","dir":"Articles","previous_headings":"","what":"Create CESAnalysis and load data","title":"Tutorial","text":"CESAnalysis primary data structure cancereffectsizeR. cancereffectsizeR workflow consists calling series functions take CESAnalysis input return altered CESAnalysis.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"load-whole-exome-sequencing-data","dir":"Articles","previous_headings":"Create CESAnalysis and load data","what":"Load whole-exome sequencing data","title":"Tutorial","text":"Let’s create CESAnalysis call load_maf() load TCGA data. Since ’re going load one MAF, ’ll provide optional maf_name. see message variants fall outside refset’s exome definitions. Since don’t know exactly exome capture techniques used BRCA project (probably different methods different study sites), isn’t unexpected. (chance know exact exome capture intervals whatever data ’re using, supply intervals load_maf()’s covered_regions argument. WGS data, simply set coverage = \"genome\".) navigate CESAnalysis, use dollar sign ($). can use accessors look MAF data well detailed variant annotations, want can perform various filtering operations, identifying prevalent variants loaded data. Let’s load clinical data analysis, . Now ’ve loaded sample data, can, example, see variant counts break across different sample groups. Let’s see breakdown PIK3CA mutation status BRCA receptor phenotype. PIK3CA mutation least prevalent triple negative breast cancer.","code":"cesa <- CESAnalysis(refset = \"ces.refset.hg38\") cesa <- load_maf(cesa = cesa, maf = tcga_maf, maf_name = \"BRCA\") cesa$maf cesa$variants cesa$samples  # Let's see the top variants (top_variants <- cesa$variants[order(-maf_prevalence)][1:10, .(variant_name, chr, start, end, maf_prevalence)]) cesa <- load_sample_data(cesa, tcga_clinical) # Get samples with 1 or more PIK3CA mutation samples_with_pik3ca <- cesa$maf[top_gene == \"PIK3CA\", unique(Unique_Patient_Identifier)] pik3ca_sample_counts <- cesa$samples[samples_with_pik3ca, .(with_PIK3CA = .N),   by = \"receptor_status\", on = \"Unique_Patient_Identifier\" ] total_sample_counts <- cesa$samples[, .N, by = \"receptor_status\"] combined_counts <- merge.data.table(pik3ca_sample_counts, total_sample_counts, by = \"receptor_status\") combined_counts[, freq := with_PIK3CA / N] combined_counts"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"load-targeted-gene-sequencing-data","dir":"Articles","previous_headings":"Create CESAnalysis and load data","what":"Load targeted gene sequencing data","title":"Tutorial","text":"load TGS data, need able define coverage. ? estimate selection mutation, need know samples mutation, samples , unknown due lack sequencing coverage. TGS samples sequenced multiple panels covering different genes, unfortunately, exact coverage (defined genomic coordinates) publicly available . Therefore, simplicity, filter TGS data mutations handful top cancer genes covered panels. load data, records outside genes excluded, leaving us greater power infer selection genes without impacting estimates outside genes, use just TCGA data. (mentioned earlier, shouldn’t filter WXS/WGS data way, since interfere mutation rate calculation, TGS samples involved mutation rate calculation.) don’t clinical file TGS data, know ’re metastatic samples. Instead creating another table calling load_sample_data(), can use sample_data_cols argument load_maf(). also add little bit padding (10 bp) coverage definitions allow variants just outside coding regions considered covered. Now data loaded, ’ll show one data-wrangling example: Let’s look variant prevalence metastatic disease status. default, variant_counts() function considers mutations, ’ll subset recurrent mutations.","code":"# Define coverage using the coding regions of these genes, as defined by the refset top_tgs_genes <- c(   \"TP53\", \"PIK3CA\", \"ESR1\", \"CDH1\", \"GATA3\", \"KMT2C\",   \"MAP3K1\", \"AKT1\", \"ARID1A\", \"FOXA1\", \"TBX3\", \"PTEN\" ) tgs_coverage <- ces.refset.hg38$gr_genes[ces.refset.hg38$gr_genes$gene %in% top_tgs_genes] tgs_maf$pM <- \"M1\" cesa <- load_maf(cesa,   maf = tgs_maf, sample_data_cols = \"pM\", maf_name = \"MBC\",   coverage = \"targeted\", covered_regions = tgs_coverage,   covered_regions_name = \"top_genes\", covered_regions_padding = 10 ) counts_by_M <- variant_counts(   cesa = cesa, variant_ids = cesa$variants[maf_prevalence > 1, variant_id],   by = \"pM\" ) counts_by_M[M1_prevalence > 0][order(-M1_prevalence)]"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"mutational-processes-and-relative-mutation-rates","dir":"Articles","previous_headings":"","what":"Mutational processes and relative mutation rates","title":"Tutorial","text":"(exome) sample data set, trinuc_mutation_rates() perform mutational signature extraction order attribute sample’s set SNVs linear combination mutational processes. default, signature extraction done using MutationalPatterns package, deconstructSigs also supported. signature attribution allows us infer sample-specific relative rates SNV mutation trinucleotide contexts. TGS samples assumed mutational processes matching group-average mutational processes exome data. (isn’t optimal, since metastatic samples may affected mutational processes, chemotherapy, lacking primary tumor exome data, might best can without finding another data source.) use signature definitions refset (’s also possible create ). improve accuracy signature extraction, exclude signatures can safely presumed absent samples; helper function, suggest_cosmic_signature_exclusions(), can provide guidance. trinuc_mutation_rates() run added useful information CESAnalysis: snv_counts: matrix SNV counts trinucleotide context. (can also generate matrix MAF data trinuc_snv_counts().) raw_attributions: Signature attributions generated extractor. MutationalPatterns, matrix contains number mutations attributed signature sample. Naturally, samples mutations tend higher raw attributions. biological_weights: proportion mutations attributed biologically-associated signature within sample. Mutations attributed signatures associated sequencing/processing artifacts left . (Technical detail: Due instability signature attributions samples mutations, Samples MAF variants weights adjusted towards group-average weights, indicated group_avg_blended column. want make claims subgroup differences mutational processes, consider leaving samples using raw attributions. also leave TGS samples, analysis treated 0 mutations.) trinuc_rates: Inferred relative rates mutation, produced matrix-multiplying biological_weights signature definitions. (rates equal empirical rates observed mutations.) ’re , MutationalPatterns nice plot functions can use. example, can plot mean SNV profile BRCA receptor subtype. (want exclude TGS samples plot cancer hotspot mutations reflective overall mutational processes, TGS samples lack receptor_status information, already left without specifically exclude .)","code":"# We'll use all suggested exclusions (TCGA primary tumors are treatment-naive) signature_exclusions <- suggest_cosmic_signature_exclusions(cancer_type = \"BRCA\", treatment_naive = TRUE)  cesa <- trinuc_mutation_rates(cesa,   signature_set = ces.refset.hg38$signatures$COSMIC_v3.2,   signature_exclusions = signature_exclusions ) snv_counts <- cesa$mutational_signatures$snv_counts # Counts look like this: snv_counts[1:5, c(\"TCGA-A2-A1FW\", \"TCGA-C8-A1HL\", \"TCGA-EW-A1P5\", \"TCGA-C8-A1HM\", \"TCGA-AN-A0FN\")] ##            ## trinuc_snv TCGA-A2-A1FW TCGA-C8-A1HL TCGA-EW-A1P5 TCGA-C8-A1HM TCGA-AN-A0FN ##    A[C>A]A            0            0            0            2            0 ##    A[C>A]C            0            1            0            2            1 ##    A[C>A]G            1            0            0            1            1 ##    A[C>A]T            1            0            0            0            0 ##    C[C>A]A            0            0            0            0            1 # We'll sum up the counts by group, leaving out a sample that has no SNVs. summed_snv_by_group <- data.table() receptor_groups <- unique(na.omit(cesa$samples$receptor_status)) samples_with_snvs <- cesa$samples[colnames(snv_counts), on = \"Unique_Patient_Identifier\"] for (grp in receptor_groups) {   curr_samples <- samples_with_snvs[grp, Unique_Patient_Identifier, on = \"receptor_status\"]   curr_snv_sum <- rowSums(snv_counts[, curr_samples])   summed_snv_by_group[, (grp) := curr_snv_sum] } summed_snv_by_group <- as.matrix(summed_snv_by_group) rownames(summed_snv_by_group) <- rownames(snv_counts) MutationalPatterns::plot_96_profile(summed_snv_by_group)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"gene-mutation-rates","dir":"Articles","previous_headings":"","what":"Gene mutation rates","title":"Tutorial","text":"Next, ’ll use gene_mutation_rates() estimate regional rates mutation absence selection. ’ll use method provided dNdScv package, uses dN/dS ratios mutation rate covariates. refset pre-computed covariates variety tissue types. mutational processes, analysis use TGS samples, calculated rates assumed hold . neutral gene mutation rates extracted dNdScv’s regression: can also look dNdScv’s identification selection gene level. ’ll filter results q < .05. Since ces.refset.hg38 covers multiple isoforms genes, dNdScv output actually per protein, per gene, ’ll take extra step showing just lowest q-value significant gene. See dNdScv’s documentation ’re interested interpretation dNdScv output. Side note: multiple tissue types analysis, call gene_mutation_rates() multiple times using samples argument specify sample groups, appropriate covariates tissue type. Similar functionality available trinuc_mutation_rates().","code":"cesa <- gene_mutation_rates(cesa, covariates = ces.refset.hg38$covariates$breast) head(cesa$gene_rates) ##                  pid    gene         rate rate_grp_1_95_low rate_grp_1_95_high ## 1: ENSP00000000233.5    ARF5 6.350206e-07      5.947954e-07       6.778247e-07 ## 2: ENSP00000000412.3    M6PR 5.756903e-07      5.446158e-07       6.084135e-07 ## 3: ENSP00000000442.6   ESRRA 5.382191e-07      5.018193e-07       5.769928e-07 ## 4: ENSP00000001008.4   FKBP4 8.303021e-07      7.736213e-07       8.906310e-07 ## 5: ENSP00000001146.2 CYP26B1 9.182355e-07      8.796483e-07       9.581680e-07 ## 6: ENSP00000002125.4 NDUFAF7 5.969951e-07      5.716527e-07       6.233497e-07 dndscv_results <- cesa$dNdScv_results[[1]] sig_genes <- dndscv_results[qallsubs_cv < .05]  # Take lowest q-value record for each gene, and sort by significance. sig_genes <- sig_genes[, .SD[which.min(qallsubs_cv)], by = \"gene\"][order(qallsubs_cv)]"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"selection-inference","dir":"Articles","previous_headings":"","what":"Selection inference","title":"Tutorial","text":"combination cohort-level gene mutation rates sample-level relative rates trinucleotide-context-specific substitution allow us estimate rate somatic substitution occurs patient’s tumor sample. clear, “rates,” don’t mean frequency mutations somatic variant calls (already know anyway). rates represent often mutations can expected occur individual cells. (specifically, assume mutation events specific sample site follow Poisson distribution, rates Poisson rates.) ’s typically necessary look rates, just show can: Interestingly, PIK3CA H1047R, prevalent variant MAF data (246/1875 samples), estimated substantially lower rate occurrence E545K E542K particular samples.","code":"# Let's take the top 3 variants by MAF prevalence. These happen to all be in PIK3CA. variants_to_check <- cesa$variants[order(-maf_prevalence), variant_id][1:3]  # A few random samples samples_to_check <- c(\"TCGA-A2-A3Y0\", \"TCGA-XX-A89A\", \"P-0000224\")  baseline_mutation_rates(cesa = cesa, variant_ids = variants_to_check, samples = samples_to_check) ##    Unique_Patient_Identifier PIK3CA_H1047R_ENSP00000263967.3 ## 1:              TCGA-A2-A3Y0                    8.421009e-07 ## 2:              TCGA-XX-A89A                    8.045869e-08 ## 3:                 P-0000224                    7.888865e-07 ##    PIK3CA_E545K_ENSP00000263967.3 PIK3CA_E542K_ENSP00000263967.3 ## 1:                   1.773358e-06                   1.773358e-06 ## 2:                   1.211613e-05                   1.211613e-05 ## 3:                   8.932666e-06                   8.932666e-06"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"default-model","dir":"Articles","previous_headings":"Selection inference","what":"Default model","title":"Tutorial","text":"can use estimated rates MAF variant data infer scaled selection coefficients (aka cancer effects, selection intensity) model selection. cancer effects directly proportional proliferative advantage provided variant. First, let’s calculate selection package’s default model selection ces_variant(): Let’s visualize selected variants. following fairly adaptable variety data sets.  PIK3CA ESR1 variants take many top spots. deconvolution mutation rate selection revealed relatively low-prevalence variants high effects. Interestingly, according dNdScv, mutation ESR1 gene level significantly greater neutral TCGA cohort primary tumors. incorporation metastatic TGS data cancereffectsizeR’s assessment selection variant-level resolution confirm ESR1’s importance.","code":"# Including an optional run_name cesa <- ces_variant(cesa = cesa, run_name = \"recurrents\") library(ggplot2)  # Extract selection results from CESAnalysis and take top variants for visualization top <- cesa$selection$recurrents top <- top[order(-selection_intensity)][1:20] # take top 20 by SI top <- top[order(selection_intensity)] # will plot lowest to highest (left to right)  # Make variant names pretty for use in plot labels top[, display_name := gsub(\"_\", \"\\n\", variant_name)] top[, display_levels := factor(display_name, levels = display_name, ordered = T)]  plot_title <- \"Top cancer effects in breast carcinoma (CES tutorial data)\" n.dodge <- 2 # can reduce to 1 if labels happen to still fit (e.g., if plotting fewer variants)  # May need to play with breaks for colorbar legibility breaks <- unique(as.numeric(round(quantile(top$included_with_variant, probs = c(0, .5, .75, 1)))))  ggplot(top, aes(x = display_levels, y = selection_intensity)) +   geom_errorbar(aes(ymin = ci_low_95, ymax = ci_high_95), width = .2, color = \"darkgrey\") +   geom_point(aes(color = included_with_variant), size = 3) +   scale_x_discrete(guide = guide_axis(n.dodge = n.dodge)) +   scale_y_log10() +   scale_color_viridis_c(     name = \"variant prevalence\", guide = \"colorbar\", trans = \"log10\",     option = \"plasma\", breaks = breaks   ) +   xlab(element_blank()) +   ylab(expression(\"cancer effect\" ~ scriptstyle(~ ~ (log[10])))) +   ggtitle(plot_title) +   guides(color = guide_colourbar(ticks = FALSE)) +   theme_minimal() +   theme(     text = element_text(family = \"Verdana\"),     axis.title.x = element_text(size = 14),     axis.text.x = element_text(size = 8),     legend.position = \"bottom\",     legend.title = element_text(size = 10),     panel.grid.major.x = element_blank(),     panel.grid.minor.x = element_blank()   )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"more-options","dir":"Articles","previous_headings":"Selection inference","what":"More options","title":"Tutorial","text":"default, recurrent variants (variants appear least twice MAF data) included ces_variant() run. demonstrated, variants argument can used specify variants test. Variants prevalences 1 even 0 (perhaps helpful establish effect ceiling) can included: variants = cesa$variants include annotated mutations analysis. Note single-hit variants -estimated effects probably neutral passengers, occurrence non-selected variant inherently improbable. variant site, samples coverage site inform selection inference. also shown , samples argument limits inference process subset eligible samples. helpful assess compare selection various groups (e.g., smoking vs. non-smoking). Besides default model, ces_variant() supports user-supplied models selection; see documentation details. hope enterprising users come new models, happy discuss ideas help work kinks. CompoundVariantSet feature, described next section, may sometimes provide improved resolution somatic selection batching related variants together.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"epistatic-cancer-effects","dir":"Articles","previous_headings":"","what":"Epistatic cancer effects","title":"Tutorial","text":"default model, variant assumed single cancer effect across samples. reality, expect variant’s selection influenced complex combination factors including sample’s mutational background (substitutions structural variants), epigenetic state tumor, various environmental factors. ces_epistasis() function allows us assess selection pair variants model pairwise epistasis, selection intensity variant allowed depending state site.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"variant-level-epistasis","dir":"Articles","previous_headings":"Epistatic cancer effects","what":"Variant-level epistasis","title":"Tutorial","text":"Let’s try two prevalent BRCA mutations, PIK3CA E545K (n=159) AKT1 E17K (n=82). Let’s also test E545K nearby PIK3CA variant, E542K (n=93). Confidence intervals tend wide epistatic analyses. Even prevalent somatic variants, co-occurrence mutual exclusivity can often explained chance. output PIK3CA E545K E542K confirms negative epistatic relationship expected given mutual exclusivity data (knowledge biological effects). E545K AKT1 E17K, see reduced selection acquisition driver, confidence intervals leave open possibility selection E545K unaffected AKT1 E17K status. (Additionally, NA’s lower bounds indicate fall lower limit optimization algorithm.)","code":"# Start by pulling full variant IDs (with protein identifier) from variants table group1 <- cesa$variants[c(\"PIK3CA_E545K\", \"AKT1_E17K\"), variant_id, on = \"variant_name\"] group2 <- cesa$variants[c(\"PIK3CA_E545K\", \"PIK3CA_E542K\"), variant_id, on = \"variant_name\"]  cesa <- ces_epistasis(   cesa = cesa, variants = list(group1, group2),   conf = .95, run_name = \"variant_epistasis_example\" ) cesa$epistasis$variant_epistasis_example ##                          variant1                       variant2   ces_v1 ## 1: PIK3CA_E545K_ENSP00000263967.3    AKT1_E17K_ENSP00000270202.4 11130.70 ## 2: PIK3CA_E545K_ENSP00000263967.3 PIK3CA_E542K_ENSP00000263967.3 11189.57 ##       ces_v2 ces_v1_after_v2 ces_v2_after_v1 joint_cov_samples_just_v1 ## 1: 20326.260           0.001        4951.200                       159 ## 2:  6503.937           0.001           0.001                       160 ##    joint_cov_samples_just_v2 joint_cov_samples_with_both ## 1:                        80                           1 ## 2:                        93                           0 ##    joint_cov_samples_with_neither ci_low_95_ces_v1 ci_high_95_ces_v1 ## 1:                           1614         9492.836          12947.23 ## 2:                           1601         9542.933          13015.87 ##    ci_low_95_ces_v2 ci_high_95_ces_v2 ci_low_95_ces_v1_after_v2 ## 1:        16190.360         25113.390                        NA ## 2:         5269.582          7917.667                        NA ##    ci_high_95_ces_v1_after_v2 ci_low_95_ces_v2_after_v1 ## 1:                   8977.837                  282.2305 ## 2:                   4279.271                        NA ##    ci_high_95_ces_v2_after_v1 ## 1:                  21877.772 ## 2:                   2431.834"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"epistasis-and-compoundvariantsets","dir":"Articles","previous_headings":"Epistatic cancer effects","what":"Epistasis and CompoundVariantSets","title":"Tutorial","text":"can probe PIK3CA/AKT1 relationship assume prevalent PIK3CA mutations share epistatic relationship AKT1 E17K. define_compound_variants() feature lets us combine arbitrary variants “compound variants” treated single variants cancereffectsizeR’s selection inference functions. (brief, mutation rate compound variant equal sum rates constituent variants, sample one constituent variants “compound variant.”) , define CompoundVariantSet two compound variants: PIK3CA variants MAF prevalence > 1, AKT E17K. pass CompoundVariantSet ces_epistasis(), test pairs compound variants (, just one pair). Note effect sizes smaller PIK3CA , since mixed lots lower-effect PIK3CA variants. four samples AKT1 E17K one PIK3CA variants, result strengthens case AKT1 mutation reducing selection PIK3CA mutation.","code":"# Collect all the variants that we want in the CompoundVariantSet into a table top_PIK3CA <- cesa$variants[gene == \"PIK3CA\" & maf_prevalence > 1] top_akt1 <- cesa$variants[variant_name == \"AKT1_E17K\"] for_compound <- rbind(top_PIK3CA, top_akt1)  # see define_compound_variants() documentation for details on arguments comp <- define_compound_variants(cesa = cesa, variant_table = for_compound, by = \"gene\", merge_distance = Inf) cesa <- ces_epistasis(cesa = cesa, variants = comp, run_name = \"AKT1_E17K_vs_PIK3CA\") cesa$epistasis$AKT1_E17K_vs_PIK3CA ##    variant1 variant2   ces_v1   ces_v2 ces_v1_after_v2 ces_v2_after_v1 ## 1: PIK3CA.1   AKT1.1 3810.191 24607.97        773.9648           0.001 ##    joint_cov_samples_just_v1 joint_cov_samples_just_v2 ## 1:                       642                        77 ##    joint_cov_samples_with_both joint_cov_samples_with_neither ci_low_95_ces_v1 ## 1:                           4                           1131         3520.196 ##    ci_high_95_ces_v1 ci_low_95_ces_v2 ci_high_95_ces_v2 ## 1:          4116.012         19625.39          30372.21 ##    ci_low_95_ces_v1_after_v2 ci_high_95_ces_v1_after_v2 ## 1:                  239.0299                   1815.866 ##    ci_low_95_ces_v2_after_v1 ci_high_95_ces_v2_after_v1 ## 1:                        NA                   6207.221"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"gene-level-epistasis","dir":"Articles","previous_headings":"Epistatic cancer effects","what":"Gene-level epistasis","title":"Tutorial","text":"convenience function ces_gene_epistasis() provides simpler way apply model ces_epistasis() gene level. variants argument provides three options variants gene include inference: “recurrent” uses recurrent variants; “nonsilent” uses nonsynonymous coding variants variants essential splice sites; , alternatively, supply custom table variants. Mutational selection two oncogenes appears maintained mutation TP53. contrast, loss TP53 less selected mutations AKT1/PIK3CA; one explanation cell populations powerful drivers fixed must already subverted tumor suppression mechanisms, making TP53 mutations superfluous. two oncogenes also appear show mutual exclusivity, selection reduced mutation .","code":"genes <- c(\"AKT1\", \"PIK3CA\", \"TP53\") cesa <- ces_gene_epistasis(cesa = cesa, genes = genes, variants = \"nonsilent\", run_name = \"gene_epistasis_example\") cesa$epistasis$gene_epistasis_example ##    gene_1 gene_2   ces_g1   ces_g2 ces_g1_after_g2 ces_g2_after_g1 ## 1:   AKT1 PIK3CA 3581.699 2299.752           0.001        634.1875 ## 2:   AKT1   TP53 2624.452 1487.174        4190.559          0.0010 ## 3: PIK3CA   TP53 2126.708 1826.338        2988.684          0.0010 ##    joint_cov_samples_just_g1_mut joint_cov_samples_just_g2_mut ## 1:                            82                           665 ## 2:                            73                           399 ## 3:                           559                           302 ##    joint_cov_samples_both_mut joint_cov_samples_no_mut ci_low_95_ces_g1 ## 1:                          6                     1101         2883.614 ## 2:                         15                     1367         2067.282 ## 3:                        112                      881         1953.153 ##    ci_high_95_ces_g1 ci_low_95_ces_g2 ci_high_95_ces_g2 ## 1:          4384.660         2127.634          2481.117 ## 2:          3273.888         1348.069          1635.585 ## 3:          2310.532         1654.519          2009.857 ##    ci_low_95_ces_g1_after_g2 ci_high_95_ces_g1_after_g2 ## 1:                        NA                   860.7655 ## 2:                  2404.988                  6708.6073 ## 3:                  2446.141                  3615.5202 ##    ci_low_95_ces_g2_after_g1 ci_high_95_ces_g2_after_g1 ## 1:                  250.5081                  1299.1061 ## 2:                        NA                  1161.4586 ## 3:                        NA                   309.2049"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/cancereffectsizeR.html","id":"save-your-work","dir":"Articles","previous_headings":"","what":"Save your work","title":"Tutorial","text":"Whether ’ve made way tutorial–simply want take break–can save commemorative (space-efficient) copy CESAnalysis using save_cesa(). can reload analysis anytime load_cesa().","code":"save_cesa(cesa = cesa, \"cancerffectsizeR_tutorial_analysis.rds\")  # In some future R session... library(cancereffectsizeR) cesa <- load_cesa(\"cancerffectsizeR_tutorial_analysis.rds\")"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/create_custom_covariates.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Generate tissue covariates data","text":"Covariates data specific tissue, cancer, cell type improves mutation rate estimates produced gene_mutation_rates(). guide shows generate covariates experimental data walking creation lung tissue covariates offered version 1.0 cancereffectsizeR data package ces.refset.hg19. source data includes RNA-Seq, histone mark, replication timing data. data files large can downloaded respective project websites. Note new versions data files available possibly used future updates ces.refset.hg19. Presumably, going trouble generating covariates data, data sources, tissue type, genome build, even species varies example. read code line line, hopefully apparent changes need made compatibility data. Please don’t hesitate contact us questions. key task associate genes defined refset (whether ces.refset.hg19, custom refset) information data sources. Usually, means either matching gene identifiers lining genes genomic positions. latter case, sure genome build experimental data matches used refset. (doesn’t, may able convert using tool liftOver.) Note run code exactly source data, output covariates data still differ slightly ces.refset.hg19 lung data improvements workflow.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/create_custom_covariates.html","id":"example-lung-tissue-covariates-for-ces-refset-hg19","dir":"Articles","previous_headings":"","what":"Example: Lung tissue covariates for ces.refset.hg19","title":"Generate tissue covariates data","text":"Start loading required packages: need gather gene information used refset interest. using custom refset directory, use readRDS load required RefCDS gr_genes data; , can access data refset environment: Next, ’ll load process experimental data. Since processing steps can time-consuming, may wish use saveRDS save processed data go, case need repeat workflow.","code":"library(data.table)   library(rtracklayer)   library(GenomicRanges)    # Load refset data package, if not using a custom refset directory   library(ces.refset.hg19) # Get gene names and gene IDs; remove version number suffixes for short IDs refset_genes = rbindlist(lapply(ces.refset.hg19$RefCDS, '[', c(\"gene_id\", \"gene_name\"))) refset_genes[, short_gene_id := gsub('\\\\..*', '', gene_id)] setkey(refset_genes, \"short_gene_id\")  # Get genomic intervals for each gene gene_gr = ces.refset.hg19$gr_genes"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/create_custom_covariates.html","id":"process-gene-based-experimental-data","dir":"Articles","previous_headings":"Example: Lung tissue covariates for ces.refset.hg19","what":"Process gene-based experimental data","title":"Generate tissue covariates data","text":"First, ’ll load lung tissue RNA-Seq gene-level read counts GTEx (Genotype-Tissue expression project). data file large contains many tissue types. ’ll use accompanying sample attributes file subset lung samples. repeat process cancer cell line RNA-Seq data DepMap’s CCLE (Cancer Cell Line Encyclopedia). , data file contains many tissue types, subset lung samples.","code":"gtex = fread(\"GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_tpm.gct.gz\") gtex_key = fread(\"GTEx_v7_Annotations_SampleAttributesDS.txt\")  # Subset to lung samples gtex_lung_samples = gtex_key[SMTSD == \"Lung\", SAMPID] gtex_lung_samples = intersect(gtex_lung_samples, colnames(gtex)) gtex = gtex[, .SD, .SDcols = c(\"Name\", gtex_lung_samples)]  # The GTEx Ensembl gene IDs (in \"Name\") include version suffixes; strip these for short IDs gtex[, short_gene_id := gsub('\\\\..*', '', Name)] gtex[, Name := NULL]  # Consider saving work in progress with saveRDS(gtex, \"my_gtex.rds\") ccle = fread(\"CCLE_DepMap_18Q1_RNAseq_RPKM_20180214.gct\") ccle_lung_samples = colnames(ccle)[grepl(colnames(ccle), pattern = \"lung\", ignore.case = T)] ccle = ccle[, .SD, .SDcols = c(\"Name\", ccle_lung_samples)]  # The CCLE Ensembl gene IDs (in \"Name\") include version suffixes; strip these for short IDs ccle[, short_gene_id := gsub('\\\\..*', '', Name)] ccle[, Name := NULL]"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/create_custom_covariates.html","id":"process-position-based-experimental-data","dir":"Articles","previous_headings":"Example: Lung tissue covariates for ces.refset.hg19","what":"Process position-based experimental data","title":"Generate tissue covariates data","text":"use histone mark data Roadmap Epigenomics. First, data converted Wig BigWig format. ’s possible outside R utilities, ’ll show R. result creation new data files “.bw” extension. significantly larger .wig.gz files, may want delete later. Now, can load converted data file GRanges object, score annotation indicates level enrichment given histone mark equally-sized genomic interval. assign scores gene based average score across overlapping genomic intervals. Finally, use replication timing data ReplicationDomain, processed nearly identically:","code":"marks = c(\"GSM1013123_UCSD.Lung.H3K27ac.STL001.wig.gz\",           \"GSM1059437_UCSD.Lung.H3K36me3.STL001.wig.gz\",           \"GSM1059443_UCSD.Lung.H3K4me1.STL001.wig.gz\",           \"GSM1120355_UCSD.Lung.H3K9me3.STL001.wig.gz\",           \"GSM906395_UCSD.Lung.H3K27ac.STL002.wig.gz\",           \"GSM906411_UCSD.Lung.H3K9me3.STL002.wig.gz\",           \"GSM910572_UCSD.Lung.H3K4me1.STL002.wig.gz\",           \"GSM915336_UCSD.Lung.H3K4me3.STL002.wig.gz\",           \"GSM956014_UCSD.Lung.H3K36me3.STL002.wig.gz\") hg19_seqinfo = seqinfo(BSgenome.Hsapiens.UCSC.hg19) # or, whatever genome you're using  for(i in 1:length(marks)) {   bw = wigToBigWig(marks[i], seqinfo = hg19_seqinfo)   message(\"Finished \", marks[i], \".\") }  # BigWig-formatted files have names based on originals bw = gsub('.wig.gz', '.bw', marks) marks_by_gene = data.table(gene_name = refset_genes$gene_name) for (i in 1:length(bw)) {   mark_gr = import.bw(bw[i])   seqlevelsStyle(mark_gr) = \"NCBI\" # to match ces.refset.hg19's gene_gr   overlaps = findOverlaps(query = mark_gr, subject = gene_gr)   overlaps_dt = data.table(chromatin_hits = queryHits(overlaps),gene_hits = subjectHits(overlaps))   overlaps_dt[, gene_name := gene_gr$names[gene_hits]]   overlaps_dt[, score := mark_gr$score[chromatin_hits]]   score_by_gene = overlaps_dt[, .(mean_score = mean(score)), by = \"gene_name\"]   current_mark = gsub('.bw', '', bw[i])   marks_by_gene[score_by_gene, (current_mark) := mean_score, on = \"gene_name\"]   message(\"Finished \", bw[i], \".\") }  # Fill entries with no data (i.e., no chromatin marks) with zeroes marks_by_gene[is.na(marks_by_gene)] = 0  # Considering saving: saveRDS(marks_by_gene, \"marks_by_gene.rds\") rep_timing = c(\"RT_IMR90_Lung Fibroblast_Int49605910_hg19.bedgraph\",                \"RT_IMR90_Lung Fibroblast_Int78679848_hg19.bedgraph\")  rt_by_gene = data.table(gene_name = refset_genes$gene_name) for (i in 1:length(rep_timing)) {   rt_gr = import.bedGraph(rep_timing[i])   seqlevelsStyle(rt_gr) = \"NCBI\" # to match ces.refset.hg19's gene_gr   overlaps = findOverlaps(query = rt_gr, subject = gene_gr)   overlaps_dt = data.table(rt_hits = queryHits(overlaps),gene_hits = subjectHits(overlaps))   overlaps_dt[, gene_name := gene_gr$names[gene_hits]]   overlaps_dt[, score := rt_gr$score[rt_hits]]   score_by_gene = overlaps_dt[, .(mean_score = mean(score)), by = \"gene_name\"]   current_rt = gsub('_hg19.bedgraph', '', rep_timing[i])   rt_by_gene[score_by_gene, (current_rt) := mean_score, on = \"gene_name\"]   message(\"Finished \", rep_timing[i], \".\") }  # Fill in zeroes for genes with no RT data rt_by_gene[is.na(rt_by_gene)] = 0"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/articles/create_custom_covariates.html","id":"combine-processed-data-and-run-prcomp","dir":"Articles","previous_headings":"Example: Lung tissue covariates for ces.refset.hg19","what":"Combine processed data and run prcomp","title":"Generate tissue covariates data","text":"combine information across refset genes present gene-based data sources. (Position-based data, chromatin replication timing data, presumed cover genes.) [Aside: refset genes present gene-based data sources covariates data generated, cancereffectsizeR’s gene_mutation_rates() instead use covariates nearest available gene. example, 95% refset.ces.hg19 genes covered CCLE GTEx data. want use gene-based data source leaves many genes, may want adopt another strategy, manually inserting appropriate value missing genes, using values nearby genes.] finish running PCA function prcomp generate prcomp-class object, contains covariates information used cancereffectsizeR, saving object. resulting covariates RDS file can placed custom refset directory, can loaded R session readRDS passed directly gene_mutation_rates().","code":"final_gene_ids = Reduce(intersect, list(refset_short_gene_ids, ccle$short_gene_id, gtex$short_gene_id)) covariates_input = refset_genes[final_gene_ids, .(short_gene_id, gene_name), on = \"short_gene_id\"]  # Merge all data for the chosen gene IDs covariates_input = merge.data.table(covariates_input, gtex, all.x = T, all.y = F, by = \"short_gene_id\") covariates_input = merge.data.table(covariates_input, ccle, all.x = T, all.y = F, by = \"short_gene_id\") covariates_input = merge.data.table(covariates_input, marks_by_gene, all.x = T, all.y = F, by = \"gene_name\") covariates_input = merge.data.table(covariates_input, rt_by_gene, all.x = T, all.y = F, by = \"gene_name\")  # drop any data columns with no variance (none, if using the example data) has_variance = sapply(covariates_input, function(x) uniqueN(x) > 1) columns_with_variance = names(has_variance)[has_variance] covariates_input = covariates_input[, ..columns_with_variance] # To format for prcomp, convert to a data-only matrix and transpose final_gene_names = covariates_input$gene_name covariates_input = t(as.matrix(covariates_input[, -c(\"gene_name\", \"short_gene_id\")])) colnames(covariates_input) = final_gene_names  # Run prcomp (with specification of 20 principal components and data scaling) covariates_output = prcomp(covariates_input, rank. = 20, scale. = T)  # Save it! saveRDS(covariates_output, \"lung.rds\")"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincent L. Cannataro. Author. Jeff Mandell. Author, maintainer.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cannataro V, Mandell J (2022). cancereffectsizeR: Calculate Cancer Effect Size. https://townsend-lab-yale.github.io/cancereffectsizeR, https://github.com/Townsend-Lab-Yale/cancereffectsizeR.","code":"@Manual{,   title = {cancereffectsizeR: Calculate Cancer Effect Size},   author = {Vincent L. Cannataro and Jeff Mandell},   year = {2022},   note = {https://townsend-lab-yale.github.io/cancereffectsizeR, https://github.com/Townsend-Lab-Yale/cancereffectsizeR}, }"},{"path":[]},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/index.html","id":"quantify-somatic-evolution-in-cancer","dir":"","previous_headings":"","what":"Quantify somatic evolution in cancer","title":"Calculate Cancer Effect Size","text":"Welcome cancereffectsizeR! R package contains variety tools analyzing somatic variant data ultimately characterizing evolutionary trajectories cancers: Annotate somatic variants built-reference data, create custom reference data set almost species/genome. Attribute mutations mutational processes extracting COSMIC signatures, custom set signature definitions. Use provided tissue-specific covariates inform calculation gene mutation rates via dNdScv, build custom covariates. Quantify cancer effects variants default model selection, test epistatic models selection, define test models. Arbitrarily batch variants position, gene, functional annotation, quantify selection batch. plan extend cancereffectsizeR’s functionality continue development, welcome feedback, ideas, bug reports.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/index.html","id":"installation-and-tutorial","dir":"","previous_headings":"","what":"Installation and tutorial","title":"Calculate Cancer Effect Size","text":"installation instructions overview package features, see tutorial. quickstart section offers condensed introduction get running basic analysis minutes.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/index.html","id":"selected-publications","dir":"","previous_headings":"","what":"Selected publications","title":"Calculate Cancer Effect Size","text":"Attribution Cancer Origins Endogenous, Exogenous, Preventable Mutational Processes, Molecular Biology Evolution  (2022).Variant effect estimates cancereffectsizeR employed novel method determine relative contributions various mutational processes oncogenesis. Effect Sizes Somatic Mutations Cancer, Journal National Cancer Institute (2018).pan-cancer analysis cancer effects employs Version 0.1.0 package. original version developed Vincent Cannataro, Stephen Gaffney, Jeffrey Townsend.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/CESAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cancereffectsizeR analysis — CESAnalysis","title":"Create a cancereffectsizeR analysis — CESAnalysis","text":"Creates CESAnalysis, central data structure cancereffectsizeR.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/CESAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cancereffectsizeR analysis — CESAnalysis","text":"","code":"CESAnalysis(refset = NULL, sample_groups = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/CESAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cancereffectsizeR analysis — CESAnalysis","text":"refset Name reference data set (refset) use; run list_ces_refsets() available refsets. Alternatively, path custom reference data directory. sample_groups (Deprecated; longer necessary.) Optionally, supply labels identifying different groups samples. designated group samples can run independently functions like trinuc_mutation_rates() gene_mutation_rates(), selection models (sswm_sequential) require multiple sample groups.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/CESAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cancereffectsizeR analysis — CESAnalysis","text":"CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/CompoundVariantSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create CompoundVariantSet directly from SNV IDs — CompoundVariantSet","title":"Create CompoundVariantSet directly from SNV IDs — CompoundVariantSet","text":"compound variant arbitrary group SNVs can tested selection single variant. (sample one constituent SNVs \"compound variant\", baseline rate variant rate least one SNVs.) CompoundVariantSet collection disjoint compound variants; , SNV can appear one compound variant. Example: CompoundVariantSet(cesa, variant_id = list(kras12 = c(\"KRAS G12C\", \"KRAS G12D\", \"KRAS G12V\"))) creates CompoundVariantSet containing one compound variant. create large set, usually easier use define_compound_variants(), calls function internally define compound variants input variant table.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/CompoundVariantSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create CompoundVariantSet directly from SNV IDs — CompoundVariantSet","text":"","code":"CompoundVariantSet(cesa, variant_id)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/CompoundVariantSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create CompoundVariantSet directly from SNV IDs — CompoundVariantSet","text":"cesa CESAnalysis (used access variant annotations) variant_id Vector variant IDs include one compound variant, list vectors, defines separate compound variant. vector list named, names kept. Otherwise, compound variants named sequentially.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/CompoundVariantSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create CompoundVariantSet directly from SNV IDs — CompoundVariantSet","text":"using function complex use case define_compound_variants() handle, please let us know can try make improvements!","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/aac_to_snv_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SNVs that cause an amino acid change — aac_to_snv_ids","title":"Get SNVs that cause an amino acid change — aac_to_snv_ids","text":"internal function figure SNVs can cause given amino acid substitution transcript","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/aac_to_snv_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SNVs that cause an amino acid change — aac_to_snv_ids","text":"","code":"aac_to_snv_ids(refcds_entry_name, aa_pos, aa_alt, bsg, refcds)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/aac_to_snv_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SNVs that cause an amino acid change — aac_to_snv_ids","text":"aa_pos Integer position substitution transcript. aa_alt Identity substitution, either three-letter code (\"Lys\") \"STOP\" bsg BSgenome object genome build associated RefCDS entry refcds_entry RefCDS entry relevant transcript","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/add_covered_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"add_covered_regions — add_covered_regions","title":"add_covered_regions — add_covered_regions","text":"add_covered_regions","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/add_covered_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_covered_regions — add_covered_regions","text":"","code":"add_covered_regions(   target_cesa = NULL,   source_cesa = NULL,   covered_regions = NULL,   covered_regions_name = NULL,   coverage_type = NULL,   covered_regions_padding = 0 )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/add_covered_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_covered_regions — add_covered_regions","text":"target_cesa CESAnalysis annotated variants covered regions added source_cesa Another CESAnalysis copy covered regions covered_regions GRanges object BED file path genome build matching target_cesa, using source_cesa covered_regions_name name identify covered regions, using source_cesa coverage_type exome, genome, targeted (using source_cesa) covered_regions_padding optionally, add +/- many bp interval covered_regions","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/add_covered_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_covered_regions — add_covered_regions","text":"CESAnalysis given target_cesa, new covered regions added","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/add_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Add variant annotations — add_variants","title":"Add variant annotations — add_variants","text":"Use function add variant annotations CESAnalysis specifying variants add one five ways: data.table containing genomic coordinates (output select_variants(), typically), GRanges object, BED file, another CESAnalysis, SNV/AAC IDs.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/add_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add variant annotations — add_variants","text":"","code":"add_variants(   target_cesa = NULL,   variant_table = NULL,   snv_id = NULL,   aac_id = NULL,   bed = NULL,   gr = NULL,   source_cesa = NULL,   padding = 0 )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/add_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add variant annotations — add_variants","text":"target_cesa CESAnalysis receive variant annotations variant_table data.table chr/start/end positions (1-based closed coordinates, like MAF format). possible SNVs overlapping table's genomic coordinates (within padding bases) added. tables returned select_variants() (CESAnalysis)$variants work, get special handling amino-acid-change SNVs: precise positions start, end, center_nt_pos used. (avoids adding variants start/end, splice-site-spanning variants can many thousands.) snv_id Character vector CES-style SNV IDs add. aac_id Character vector AAC IDs (short names, like \"KRAS_G12C\") bed path BED file. possible SNVs overlapping BED intervals (within padding bases) added. gr GRanges object. possible SNVs overlapping ranges (within padding bases) added. source_cesa Another CESAnalysis copy snv_ids. SNVs re-annotated using target_cesa's associated reference data. padding many bases (default 0) expand start end gr range","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/add_variants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add variant annotations — add_variants","text":"methods adding variants work identifying SNVs add using target_cesa's associated reference data identify overlapping amino-acid-change mutations, added well. (add just SNVs just AACs.) Note try add far distinct variants appear typical cohort (, millions), annotation take annotation tables CESAnalysis may take significant memory. Please contact us issues.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/annotate_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate variants — annotate_variants","title":"Annotate variants — annotate_variants","text":"Annotates CESAnalysis MAF data reference genome gene data; called load_maf","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/annotate_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate variants — annotate_variants","text":"","code":"annotate_variants(refset = NULL, variants = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/annotate_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate variants — annotate_variants","text":"refset CES reference data set (e.g., ces.refset.hg19 data package) variants MAF-like data.table variants (e.g., generated preload_maf())","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/artifact_account.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relative rates of biological mutational processes — artifact_account","title":"Calculate relative rates of biological mutational processes — artifact_account","text":"Sets artifact signature weights zero normalizes biologically-associated weights sum (1 - unattributed proportion) sample.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/artifact_account.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relative rates of biological mutational processes — artifact_account","text":"","code":"artifact_account(   weights,   signature_names,   artifact_signatures = NULL,   fail_if_zeroed = FALSE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/artifact_account.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relative rates of biological mutational processes — artifact_account","text":"weights data.table signature weights (can extra columns) signature_names names signatures weights (.e., column names) artifact_signatures vector artifact signature names (NULL) fail_if_zeroed T/F whether exit tumor -zero weights.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/assign_gr_to_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"assign_gr_to_coverage — assign_gr_to_coverage","title":"assign_gr_to_coverage — assign_gr_to_coverage","text":"Adds validated GRanges object CESAnalysis's coverage set. Called  add_covered_regions() various checks pass.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/assign_gr_to_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assign_gr_to_coverage — assign_gr_to_coverage","text":"","code":"assign_gr_to_coverage(cesa, gr, covered_regions_name, coverage_type)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/assign_gr_to_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"assign_gr_to_coverage — assign_gr_to_coverage","text":"cesa CESAnalysis receive gr gr GRanges covered_regions_name unique name covered regions coverage_type \"exome\" \"targeted\"","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/assign_gr_to_coverage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"assign_gr_to_coverage — assign_gr_to_coverage","text":"Special handling occurs covered_regions_name \"exome+\".","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/assign_group_average_trinuc_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Skip mutational signature analysis and assign group average relative trinucleotide-context-specific mutation rates to all samples — assign_group_average_trinuc_rates","title":"Skip mutational signature analysis and assign group average relative trinucleotide-context-specific mutation rates to all samples — assign_group_average_trinuc_rates","text":"function calculates relative rates trinucleotide-context-specific mutations across SNV records whole-exome whole-genome MAF data naively assigns rates samples.  can helpful SNV mutational signatures available species,  want assume samples share SNV mutational processes without relying signatures. Normally, mutational signatures available, better use trinuc_snv_mutation_rates().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/assign_group_average_trinuc_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skip mutational signature analysis and assign group average relative trinucleotide-context-specific mutation rates to all samples — assign_group_average_trinuc_rates","text":"","code":"assign_group_average_trinuc_rates(cesa)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/assign_group_average_trinuc_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skip mutational signature analysis and assign group average relative trinucleotide-context-specific mutation rates to all samples — assign_group_average_trinuc_rates","text":"cesa CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/assign_group_average_trinuc_rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skip mutational signature analysis and assign group average relative trinucleotide-context-specific mutation rates to all samples — assign_group_average_trinuc_rates","text":"reduce influence selection, non-recurrent mutations (.e., mutations occur just one sample) used calculate rates. Targeted sequencing data excluded reason, also trinucleotide composition targeted regions different exome/genome.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/baseline_mutation_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Baseline mutation rate calculation — baseline_mutation_rates","title":"Baseline mutation rate calculation — baseline_mutation_rates","text":"Calculates neutral mutation rates specific sites based gene mutation rates relative trinucleotide-context-specific SNV mutation rates sample","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/baseline_mutation_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Baseline mutation rate calculation — baseline_mutation_rates","text":"","code":"baseline_mutation_rates(   cesa,   aac_ids = NULL,   snv_ids = NULL,   variant_ids = NULL,   samples = character(),   cores = 1 )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/baseline_mutation_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Baseline mutation rate calculation — baseline_mutation_rates","text":"cesa CESAnalysis gene mutation rates tumor-specific trinucleotide-context-specific mutation rates already calculated aac_ids vector IDs amino acid change variants snv_ids vector IDs SNVs variant_ids vector mixed IDs (faster use snv_ids aac_ids large jobs, already known) samples samples calculate rates . Defaults samples. Can vector Unique_Patient_Identifiers, data.table containing rows CESAnalysis sample table. cores number cores use mutation processing (useful large data sets mutation lists)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/baseline_mutation_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Baseline mutation rate calculation — baseline_mutation_rates","text":"data table mutation rates one column per variant, Unique_Patient_Identifier column identifying row","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/build_RefCDS.html","id":null,"dir":"Reference","previous_headings":"","what":"cancereffectsizeR's RefCDS builder — build_RefCDS","title":"cancereffectsizeR's RefCDS builder — build_RefCDS","text":"Based buildref function Inigo Martincorena's package dNdScv, function takes gene/transcript/CDS definitions creates dNdScv-style RefCDS object associated GenomicRanges object also required run dNdScv.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/build_RefCDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cancereffectsizeR's RefCDS builder — build_RefCDS","text":"","code":"build_RefCDS(   gtf,   genome,   use_all_transcripts = TRUE,   cds_ranges_lack_stop_codons = TRUE,   cores = 1,   additional_essential_splice_pos = NULL,   numcode = 1,   chromosome_style = \"NCBI\" )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/build_RefCDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cancereffectsizeR's RefCDS builder — build_RefCDS","text":"gtf Path Gencode-style GTF file, equivalently formatted data table. See details required columns (features). possible build  table using data pulled biomaRt, easier use GTF. genome Genome assembly name (e.g., \"hg19\"); associated BSgenome object must available load. Alternatively, supply BSgenome object directly. use_all_transcripts T/F (default TRUE): Whether use complete transcripts just longest one gene. cds_ranges_lack_stop_codons CDS records Gencode GTFs include stop codons genomic intervals. input include stop  codons within CDS records, set FALSE. cores many cores use parallel computations additional_essential_splice_pos Usually needed. list additional essential splice site positions combine calculated automatically function. element list name matching protein_id input consist numeric vector additional positions. option exists mutations chr17:7579312 TP53 treated splice site mutations cancereffectsizeR's default hg19 reference data set. (Variants coding position, always synonymous, validated effects splicing, even though position misses automatic \"essential splice\" annotation 1 base.) numcode (use) NCBI genetic code number; currently code 1, standard genetic code, supported chromosome_style Chromosome naming style use. Defaults \"NCBI\". human genome, means 1, 2,..., opposed \"UCSC\" style (chr1, chr2, ...). Value gets passed genomeInfoDb's seqlevelsStyle().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/build_RefCDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cancereffectsizeR's RefCDS builder — build_RefCDS","text":"two-item list: RefCDS (big list, entry containing   information one coding sequence (CDS)), GRanges object defines   genomic intervals covered CDS.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/build_RefCDS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cancereffectsizeR's RefCDS builder — build_RefCDS","text":"Required columns seqnames, start, end, strand, gene_name, gene_id, protein_id, type.  rows type == \"CDS\" used. Strand \"+\" \"-\". default, one longest complete transcript used gene input. set use_all_transcripts = TRUE, complete transcripts used, resulting multiple RefCDS entries genes. , may want first eliminate low-confidence superfluous transcripts input data.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/calculate_trinuc_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate trinuc rates — calculate_trinuc_rates","title":"Calculate trinuc rates — calculate_trinuc_rates","text":"Used internally calculate trinuc rates signature weights","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/calculate_trinuc_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate trinuc rates — calculate_trinuc_rates","text":"","code":"calculate_trinuc_rates(weights, signatures, tumor_names)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/calculate_trinuc_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate trinuc rates — calculate_trinuc_rates","text":"weights matrix signature weights signatures matrix signatures tumor_names names tumors corresponding rows weights","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/calculate_trinuc_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate trinuc rates — calculate_trinuc_rates","text":"matrix trinuc rates row corresponds tumor","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/calculate_trinuc_rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate trinuc rates — calculate_trinuc_rates","text":"relative rate less 1e-9, add lowest -threshold rate rates renormalize rates sum 1.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_epistasis.html","id":null,"dir":"Reference","previous_headings":"","what":"Variant-level pairwise epistasis — ces_epistasis","title":"Variant-level pairwise epistasis — ces_epistasis","text":"Calculate selection intensity assumption pairwise epistasis pairs variants. CompoundVariantSets supported.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_epistasis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variant-level pairwise epistasis — ces_epistasis","text":"","code":"ces_epistasis(   cesa = NULL,   variants = NULL,   samples = character(),   run_name = \"auto\",   cores = 1,   conf = 0.95 )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_epistasis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variant-level pairwise epistasis — ces_epistasis","text":"cesa CESAnalysis variants test pairs variants, supply list element 2-length vector CES-style variant IDs. Alternatively (often usefully), supply CompoundVariantSet (see define_compound_variants) test pairs compound variants set. samples samples include inference. Defaults samples. Can vector Unique_Patient_Identifiers, data.table containing rows CESAnalysis sample table. run_name Optionally, name identify current run. cores number cores parallel processing variant pairs conf confidence interval size 0 1 (.95 -> 95%); NULL skips calculation, reducing runtime.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_epistasis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variant-level pairwise epistasis — ces_epistasis","text":"data table pairwise-epistatic selection intensities variant   frequencies tumors coverage variants pair","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_gene_epistasis.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene-level epistasis — ces_gene_epistasis","title":"Gene-level epistasis — ces_gene_epistasis","text":"Calculate selection intensity assumption pairwise gene-level epistasis. Selection gene level assumed act  specified variants (see options), selection gene's variants allowed vary based mutational status gene's variants.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_gene_epistasis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene-level epistasis — ces_gene_epistasis","text":"","code":"ces_gene_epistasis(   cesa = NULL,   genes = NULL,   variants = NULL,   samples = character(),   run_name = \"auto\",   cores = 1,   conf = 0.95 )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_gene_epistasis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene-level epistasis — ces_gene_epistasis","text":"cesa CESAnalysis object genes Vector gene names; SIs calculated gene pairs. Alternatively, list gene pairs (2-length character vectors) run just given pairings. variants variants include inference gene. Either \"recurrent\" variants present two samples (across MAF data), \"nonsilent\" nonsynonymous coding variants variants essential splice sites, data.table containing variants include (returned select_variants() subsetting[CESAnalysis\\]$variants). noncoding variants multiple gene annotations, one listed \"gene\" column used. recurrent method, nearby noncoding variants may included. samples samples include inference. Defaults samples. Can vector Unique_Patient_Identifiers, data.table containing rows CESAnalysis sample table. run_name Optionally, name identify current run. cores number cores parallel processing gene pairs conf Confidence interval size 0 1 (.95 -> 95%). NULL skips calculation, may helpful reduce runtime analyzing many gene pairs.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_gene_epistasis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene-level epistasis — ces_gene_epistasis","text":"CESAnalysis epistasis analysis results added","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_gene_epistasis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene-level epistasis — ces_gene_epistasis","text":"samples coverage included sites genes can included inference since samples lacking full coverage may may mutations uncovered sites.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_variant.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cancer effects of variants — ces_variant","title":"Calculate cancer effects of variants — ces_variant","text":"function calculates variant effect sizes chosen model selection. default, variant assumed consistent selection intensity across samples. Set model = \"sequential\" allow selection intensity vary among sequential sample groups (e.g., stages 1-4; local/distant metastases). Use groups define group ordering restrict groups considered either built-model. default, variants MAF frequency > 1 (.e., recurrent variants) tested. include variants, otherwise customize variants include, call select_variants() desired parameters.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_variant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cancer effects of variants — ces_variant","text":"","code":"ces_variant(   cesa = NULL,   variants = select_variants(cesa, min_freq = 2),   samples = character(),   model = \"default\",   run_name = \"auto\",   ordering_col = NULL,   ordering = NULL,   lik_args = list(),   hold_out_same_gene_samples = \"auto\",   groups = NULL,   cores = 1,   conf = 0.95 )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_variant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cancer effects of variants — ces_variant","text":"cesa CESAnalysis object variants Variant table select_variants(), CompoundVariantSet define_compound_variants(). Defaults recurrent noncoding SNVs (SNV-derived) coding mutations, recurrent means appearing least two samples MAF data set. samples samples include inference. Defaults samples. Can vector Unique_Patient_Identifiers, data.table containing rows CESAnalysis sample table. model \"basic\" \"sequential\" use built-models selection, supply custom function factory (see details). run_name Optionally, name identify current run. ordering_col sequential model (possibly custom models), name sample table column defines sample chronology. ordering sequential model (possibly custom models), character vector list defining ordering values ordering_col. Use list assign  multiple values ordering_col position (e.g., `list(early = c(\"\", \"II), late = c(\"III\", \"IV\")))` early vs. late analysis). lik_args Extra arguments, given list, pass custom likelihood functions. hold_out_same_gene_samples finding likelihood variant, hold samples lack variant mutations gene. default, TRUE running single variants, FALSE CompoundVariantSet. groups (Deprecated; use samples sequential model, see ordering/ordering_col.) sample groups include inference. Data outgroup samples inform selection calculation. models (like sequential) assume ordered groups samples, use list indicate group ordering. Examples: c(\"group1\", \"group2\") includes groups 1 2, indicate ordering, invalid ordered-group models. list(\"Primary\", \"Metastatic\") indicates two ordered groups, list(\"\", c(\"B\", \"C\"), \"D\") means group first, groups B C share intermediate state, group D last. cores number cores use conf selection intensity confidence interval width (NULL skips calculation, speeds runtime)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_variant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cancer effects of variants — ces_variant","text":"CESAnalysis object selection results appended selection output list","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/ces_variant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate cancer effects of variants — ces_variant","text":"possible pass selection model. need create \"function factory\" , variant, produces likelihood function can evaluated data. first two arguments must rates_tumors_with rates_tumors_without, take baseline site mutation rates samples without variant. third argument must sample_index, data.table associates Unique_Patient_Identifiers group names indices. (used sequential model; model incorporate sample grouping, can ignore .) Values three arguments calculated ces_variant passed function factory automatically. function can take whatever additional arguments like, can pass values using lik_args. likelihood function parameters ces_variant optimize named default values. See source code sswm_sequential_lik() example.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/check_for_ref_data.html","id":null,"dir":"Reference","previous_headings":"","what":"check_for_ref_data — check_for_ref_data","title":"check_for_ref_data — check_for_ref_data","text":"checks requested reference data exists returns T/F","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/check_for_ref_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_for_ref_data — check_for_ref_data","text":"","code":"check_for_ref_data(data_dir_or_cesa, datatype)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/check_for_ref_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_for_ref_data — check_for_ref_data","text":"data_dir_or_cesa CESAnalysis, file path reference data directory","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/check_sample_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch duplicate samples — check_sample_overlap","title":"Catch duplicate samples — check_sample_overlap","text":"Takes data.table MAF data (produced, typically, preload_maf()) identifies samples relatively high proportions shared SNV mutations. flagged sample pairs may reflect shared driver mutations chance overlap variants SNV sequencing error hotspots. high overlap may indicate sample duplication, re-use samples across data sources, within-experiment sample contamination. limit influence shared calling error, recommended run function quality filtering MAF records, final step.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/check_sample_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch duplicate samples — check_sample_overlap","text":"","code":"check_sample_overlap(maf_list)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/check_sample_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catch duplicate samples — check_sample_overlap","text":"maf_list list data.tables (single data.table) MAF data cancereffectsizeR-style column names, generated preload_maf().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/check_sample_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Catch duplicate samples — check_sample_overlap","text":"data.table overlap statistics","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/check_sample_overlap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Catch duplicate samples — check_sample_overlap","text":"Sample pairs flagged ... samples <6 total SNVs shared SNVs. samples <21 total SNVs >1 shared mutation. One sample just 1 2 total SNVs overlaps sample. samples >2 shared SNVs least one percent SNVs shared (sample fewer SNVs). thresholds err side reporting many possible duplicates. general, especially dealing targeted sequencing data, presence 1 2 shared mutations pair samples strong evidence sample duplication. user filter interpret output. addition reporting SNV counts, function divides genome 1000-bp windows reports following: variant_windows_A: Number windows sample variant. variant_windows_B: B. windows_shared: Number windows contain variant shared samples. Sometimes, samples little overlap except hotspots may derive shared calling error highly mutable regions. window counts can help distinguish samples pervasive SNV overlap.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clean_granges_for_cesa.html","id":null,"dir":"Reference","previous_headings":"","what":"clean_granges_for_cesa — clean_granges_for_cesa","title":"clean_granges_for_cesa — clean_granges_for_cesa","text":"Tries format input GRanges object compatible CESAnalysis reference genome. Optionally, also applies padding start end positions ranges, stopping chromosome ends. Either stops error returns clean granges object.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clean_granges_for_cesa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean_granges_for_cesa — clean_granges_for_cesa","text":"","code":"clean_granges_for_cesa(cesa = NULL, gr = NULL, padding = 0, refset_env = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clean_granges_for_cesa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean_granges_for_cesa — clean_granges_for_cesa","text":"cesa CESAnalysis gr GRanges object padding many bases expand start end position","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_effect_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear variant effect output — clear_effect_output","title":"Clear variant effect output — clear_effect_output","text":"Remove output previous ces_variant() runs CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_effect_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear variant effect output — clear_effect_output","text":"","code":"clear_effect_output(cesa, run_names = names(cesa$selection))"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_effect_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear variant effect output — clear_effect_output","text":"cesa CESAnalysis run_names previous runs remove; defaults removing .","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_epistasis_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear epistasis output — clear_epistasis_output","title":"Clear epistasis output — clear_epistasis_output","text":"Remove previous epistatic effect estimations CESAnalysis.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_epistasis_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear epistasis output — clear_epistasis_output","text":"","code":"clear_epistasis_output(cesa, run_names = names(cesa$epistasis))"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_epistasis_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear epistasis output — clear_epistasis_output","text":"cesa CESAnalysis. run_names previous runs remove; defaults removing .","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_gene_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear regional mutation rates — clear_gene_rates","title":"Clear regional mutation rates — clear_gene_rates","text":"Remove gene/coding region mutation rates, usually order re-run different parameters without create new CESAnalysis.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_gene_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear regional mutation rates — clear_gene_rates","text":"","code":"clear_gene_rates(cesa = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_gene_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear regional mutation rates — clear_gene_rates","text":"cesa CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_gene_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear regional mutation rates — clear_gene_rates","text":"CESAnalysis rates cleared","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear sample data — clear_sample_data","title":"Clear sample data — clear_sample_data","text":"Remove data columns name CESAnalysis sample table. clear cancereffectsizeR-generated columns, coverage.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear sample data — clear_sample_data","text":"","code":"clear_sample_data(cesa, cols)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_sample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear sample data — clear_sample_data","text":"cesa CESAnalysis cols names data columns clear","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_trinuc_rates_and_signatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear mutational signature attributions and related mutation rate information — clear_trinuc_rates_and_signatures","title":"Clear mutational signature attributions and related mutation rate information — clear_trinuc_rates_and_signatures","text":"Removes data calculated supplied via trinuc_mutation_rates, set_signature_weights, set_trinuc_rates, etc. function can used want re-run signature analysis different sample groupings parameters.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_trinuc_rates_and_signatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear mutational signature attributions and related mutation rate information — clear_trinuc_rates_and_signatures","text":"","code":"clear_trinuc_rates_and_signatures(cesa)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/clear_trinuc_rates_and_signatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear mutational signature attributions and related mutation rate information — clear_trinuc_rates_and_signatures","text":"cesa CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/complete_aac_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Create full AAC ID — complete_aac_ids","title":"Create full AAC ID — complete_aac_ids","text":"example, KRAS_G12C -> KRAS_G12C_ENSP00000256078 (ces.refset.hg19). cases multiple protein IDs per gene, return IDs input. Otherwise, input/output maintain order.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/complete_aac_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create full AAC ID — complete_aac_ids","text":"","code":"complete_aac_ids(partial_ids, refset)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/complete_aac_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create full AAC ID — complete_aac_ids","text":"partial_ids AAC variant names, \"KRAS_G12C\" \"MIB2 G395C\" refset reference data set (environment object)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/convert_signature_weights_for_mp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MutationalPatterns contributions matrix — convert_signature_weights_for_mp","title":"Get MutationalPatterns contributions matrix — convert_signature_weights_for_mp","text":"Reformat signature weights table mutational signature analysis contributions matrix required MutationalPatterns functions, including visualizations.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/convert_signature_weights_for_mp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MutationalPatterns contributions matrix — convert_signature_weights_for_mp","text":"","code":"convert_signature_weights_for_mp(signature_weight_table)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/convert_signature_weights_for_mp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MutationalPatterns contributions matrix — convert_signature_weights_for_mp","text":"signature_weight_table created trinuc_mutation_rates(); typically accessed via (CESAnalysis)$mutational_signatures.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/copy_cesa.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an independent copy of a CESAnalysis — copy_cesa","title":"Create an independent copy of a CESAnalysis — copy_cesa","text":"Used internally \"copy\" CESAnalysis objects keeping memory use minimum.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/copy_cesa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an independent copy of a CESAnalysis — copy_cesa","text":"","code":"copy_cesa(cesa)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/copy_cesa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an independent copy of a CESAnalysis — copy_cesa","text":"cesa CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/copy_cesa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an independent copy of a CESAnalysis — copy_cesa","text":"trick use data.table's copy function data.tables (lists data.tables) within CESAnalysis slots. (just call copy whole object, data tables handled memory-efficient way. call copy non-data.tables, actually less efficient since forces immediate full copy instead usual copy--modify.)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/create_refset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a custom refset — create_refset","title":"Create a custom refset — create_refset","text":"Use function create save directory custom reference data can used cancereffectsizeR instead supplied refsets like ces.refset.hg19. arguments required except default_exome/exome_interval_padding, recommended.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/create_refset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a custom refset — create_refset","text":"","code":"create_refset(   output_dir,   refcds_output,   species_name,   genome_build_name,   BSgenome_name,   supported_chr = c(1:22, \"X\", \"Y\"),   default_exome = NULL,   exome_interval_padding = 0 )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/create_refset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a custom refset — create_refset","text":"output_dir Name/path existing, writeable output directory data saved. name directory serve name custom refset. refcds_output Transcript information two-item list (consisting RefCDS gr_genes) output build_RefCDS. species_name Name species, primarily display (e.g., \"human\"). genome_build_name Name genome build, primarily display (e.g., \"hg19\"). BSgenome_name name BSgenome package use (e.g., \"hg19\"); used cancereffectsizeR load reference genome via BSgenome::getBSgenome(). supported_chr Character vector supported chromosomes. Note cancereffectsizeR uses NCBI-style chromosome names, means chr prefixes (\"X\", \"chrX\"). Mitochondrial contigs included since require special handling implemented. default_exome BED file GRanges object defines coding regions genome might used exome capture kit. file (GRanges) might acquired generated exome capture kit documentation, alternatively, coding regions defined GTF file (granges output build_RefCDS()). exome_interval_padding Number bases pad start/end covered interval, allow variants called just outside targeted regions, still may pretty good sequencing coverage.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/create_refset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a custom refset — create_refset","text":"run function, need output build_RefCDS().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/define_compound_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide batches of variants into a CompoundVariantSet — define_compound_variants","title":"Divide batches of variants into a CompoundVariantSet — define_compound_variants","text":"compound variant arbitrary group SNVs can tested selection single variant. (sample one constituent SNVs \"compound variant\", baseline rate variant rate least one SNVs.) CompoundVariantSet collection disjoint compound variants; , SNV can appear one compound variant. collecting variants interest table using select_variants()--subsetting annotating table desired--use function produce CompoundVariantSet combines variants distinct compound variants based criteria.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/define_compound_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide batches of variants into a CompoundVariantSet — define_compound_variants","text":"","code":"define_compound_variants(cesa, variant_table, by = NULL, merge_distance = 0)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/define_compound_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide batches of variants into a CompoundVariantSet — define_compound_variants","text":"cesa CESAnalysis variant_table Data table variants, style generated select_variants(). One column names use initial splitting input table variant groups. distinct group divided compound variants based merge_distance merge_distance maximum genomic distance given variant nearest variant compound variant variant variant merged compound variant (opposed assigned compound variant).","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/define_compound_variants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Divide batches of variants into a CompoundVariantSet — define_compound_variants","text":"function works first splitting input table columns given . example, splitting \"gene\" split table gene-specific subtables. , subtable divided compound variants based merge_distance. variants subtable within specified genomic distance merged candidate compound variant, compound variants repeatedly merged nearest two variants pair compound variants within merge_distance. Note overlapping variants always merged unless use separate different subtables (example, splitting alt aa_alt). use split variants functional annotation, can set merge_distance high merge -chromosome sites (e.g., 1e9 human genome). merge sites across chromosomes, set merge_distance = Inf.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/detect_mnv.html","id":null,"dir":"Reference","previous_headings":"","what":"Find likely MNVs in an MAF table — detect_mnv","title":"Find likely MNVs in an MAF table — detect_mnv","text":"-sample variants 2bp variants likely MNVs.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/detect_mnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find likely MNVs in an MAF table — detect_mnv","text":"","code":"detect_mnv(maf)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/detect_mnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find likely MNVs in an MAF table — detect_mnv","text":"maf valid MAF-style data.table","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/detect_mnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find likely MNVs in an MAF table — detect_mnv","text":"table MAF records","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/dot-add_covered_regions.html","id":null,"dir":"Reference","previous_headings":"","what":".add_covered_regions — .add_covered_regions","title":".add_covered_regions — .add_covered_regions","text":".add_covered_regions","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/dot-add_covered_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".add_covered_regions — .add_covered_regions","text":"","code":".add_covered_regions(   cesa,   coverage_type,   covered_regions,   covered_regions_name,   covered_regions_padding )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/dot-add_covered_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".add_covered_regions — .add_covered_regions","text":"coverage_type exome targeted, using source_cesa covered_regions GRanges object BED file path genome build matching target_cesa, using source_cesa covered_regions_name name identify covered regions, using source_cesa covered_regions_padding optionally, add +/- many bp interval covered_regions","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/dot-add_covered_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".add_covered_regions — .add_covered_regions","text":"CESAnalysis given target_cesa, new covered regions added","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/dot-variant_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal variant prevalence and coverage calculation — .variant_counts","title":"Internal variant prevalence and coverage calculation — .variant_counts","text":"Called variant_counts() (select_variants()) validated inputs.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/dot-variant_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal variant prevalence and coverage calculation — .variant_counts","text":"","code":".variant_counts(   cesa,   samples,   snv_from_aac,   noncoding_snv_id,   by_cols = character() )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/dot-variant_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal variant prevalence and coverage calculation — .variant_counts","text":"cesa CESAnalysis samples validated samples table snv_from_aac data.table columns aac_id, snv_id (validated annotations CESAnalysis) noncoding_snv_id vector snv_ids treat noncoding variants by_cols validated column names sample table suitable use counting .","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/epistasis_results.html","id":null,"dir":"Reference","previous_headings":"","what":"View output from epistasis functions — epistasis_results","title":"View output from epistasis functions — epistasis_results","text":"returns list data tables results epistasis functions","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/epistasis_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View output from epistasis functions — epistasis_results","text":"","code":"epistasis_results(cesa = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/epistasis_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View output from epistasis functions — epistasis_results","text":"cesa CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/excluded_maf_records.html","id":null,"dir":"Reference","previous_headings":"","what":"View excluded MAF data — excluded_maf_records","title":"View excluded MAF data — excluded_maf_records","text":"returns data.table containing MAF records excluded given CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/excluded_maf_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View excluded MAF data — excluded_maf_records","text":"","code":"excluded_maf_records(cesa = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/excluded_maf_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View excluded MAF data — excluded_maf_records","text":"cesa CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/gene_mutation_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Use dNdScv with tissue-specific covariates to calculate gene-level mutation rates — gene_mutation_rates","title":"Use dNdScv with tissue-specific covariates to calculate gene-level mutation rates — gene_mutation_rates","text":"function calculates gene-level neutral mutation rates based counts nonsynonymous synonymous mutations per gene dNdScv package's model,  described Martincorena et al.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/gene_mutation_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use dNdScv with tissue-specific covariates to calculate gene-level mutation rates — gene_mutation_rates","text":"","code":"gene_mutation_rates(   cesa,   covariates = NULL,   samples = character(),   dndscv_args = list(),   save_all_dndscv_output = FALSE,   sample_group = NULL )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/gene_mutation_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use dNdScv with tissue-specific covariates to calculate gene-level mutation rates — gene_mutation_rates","text":"cesa CESAnalysis object covariates Tissue-specific mutation rate covariates. Typically, supply covariates object refset (e.g., ces.refset.hg19$covariates$bladder), object name (\"bladder\"). Run list_ces_covariates() see choices. hg19 data , set \"hg19\" use dNdScv's non-tissue-specific covariates. appropriate covariates data available, set NULL run without. Finally, can also supply custom covariates data form matrix prcomp object (see website details). samples samples include current run. Defaults samples. Can vector Unique_Patient_Identifiers, data.table containing rows CESAnalysis sample table. dndscv_args Custom arguments pass dNdScv. (arguments mutations, gene_list, cv, refdb supplied cancereffectsizeR substituted.) save_all_dndscv_output Default FALSE; TRUE, saves dndscv output, just needed cancereffectsizeR. (Full output can large, gigabytes.) sample_group sample groups include gene rate calculation; defaults groups. (calculate different rates different groups,  run function multiple times, changing argument time.)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/gene_mutation_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use dNdScv with tissue-specific covariates to calculate gene-level mutation rates — gene_mutation_rates","text":"CESAnalysis object gene-level mutation rates calculated","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_TCGA_project_MAF.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MAF data from TCGA cohort — get_TCGA_project_MAF","title":"Get MAF data from TCGA cohort — get_TCGA_project_MAF","text":"convenience function queries Genomic Data Commons API get MAF data generated Aliquot Ensemble Somatic Variant Merging Masking workflow specified project, writes MAF file. API always provides data latest data release. function might work non-TCGA MAF data hosted GDC (e.g., TARGET GENIE-MSK), tested users proceed caution.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_TCGA_project_MAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MAF data from TCGA cohort — get_TCGA_project_MAF","text":"","code":"get_TCGA_project_MAF(   project = NULL,   filename = NULL,   test_run = FALSE,   exclude_TCGA_nonprimary = TRUE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_TCGA_project_MAF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MAF data from TCGA cohort — get_TCGA_project_MAF","text":"project TCGA project name (e.g., \"TCGA-BRCA\"). filename Output filename MAF data saved. Must end '.maf' (plaintext) '.maf.gz' (gzip compressed). test_run Default FALSE. TRUE, gets MAF data samples instead whole cohort. exclude_TCGA_nonprimary Default TRUE. TCGA projects, exclude samples associated patient's initial primary tumor. (many TCGA projects, small handful patients metastatic, recurrent, additional primary samples.)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_TCGA_project_MAF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get MAF data from TCGA cohort — get_TCGA_project_MAF","text":"TCGA cohort MAFs structured downloaded, Unique_Patient_Identifier column generated first 12 characters Tumor_Sample_Barcode. passed preload_maf() load_maf(), column supersede Tumor_Sample_Barcode. handful patients multiple Tumor_Sample_Barcodes (essentially replicated sequencing, high variant overlap), functions effectively take union samples patient. Relatedly, small number TCGA non-primary tumor samples handled way (samples default removed function). Temporary aliquot MAF files downloaded function deleted read.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_ces_signature_set.html","id":null,"dir":"Reference","previous_headings":"","what":"get_ces_signature_set — get_ces_signature_set","title":"get_ces_signature_set — get_ces_signature_set","text":"given CES reference data collection signature set name, returns cancereffectsizeR's internal data signature set three-item list:  signature set name, data table signature metadata, signature  definition data frame","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_ces_signature_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_ces_signature_set — get_ces_signature_set","text":"","code":"get_ces_signature_set(refset, name)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_ces_signature_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_ces_signature_set — get_ces_signature_set","text":"refset name refset (using custom refset, must loaded CESAnalysis already) name name signature set","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_cesa_bsg.html","id":null,"dir":"Reference","previous_headings":"","what":"get_cesa_bsg — get_cesa_bsg","title":"get_cesa_bsg — get_cesa_bsg","text":"Loads right BSgenome CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_cesa_bsg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_cesa_bsg — get_cesa_bsg","text":"","code":"get_cesa_bsg(cesa)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_cesa_bsg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_cesa_bsg — get_cesa_bsg","text":"cesa CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_dndscv_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"This little function called by gene_mutation_rates() is separated for testing purposes. — get_dndscv_model_fit","title":"This little function called by gene_mutation_rates() is separated for testing purposes. — get_dndscv_model_fit","text":"little function called gene_mutation_rates() separated testing purposes.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_dndscv_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This little function called by gene_mutation_rates() is separated for testing purposes. — get_dndscv_model_fit","text":"","code":"get_dndscv_model_fit(dndscv_output)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_gene_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get table of neutral gene mutation rates — get_gene_rates","title":"Get table of neutral gene mutation rates — get_gene_rates","text":"Get table neutral gene mutation rates","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_gene_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get table of neutral gene mutation rates — get_gene_rates","text":"","code":"get_gene_rates(cesa = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_gene_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get table of neutral gene mutation rates — get_gene_rates","text":"cesa CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_gr_from_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GRanges from chr/start/end table — get_gr_from_table","title":"Get GRanges from chr/start/end table — get_gr_from_table","text":"Mainly built select_variants() output, uses center_nt_pos AACs (rather start-end). Assumes MAF-like coordinates (1-based, closed).","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_gr_from_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GRanges from chr/start/end table — get_gr_from_table","text":"","code":"get_gr_from_table(variant_table)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_gr_from_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GRanges from chr/start/end table — get_gr_from_table","text":"variant_table data.table","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_ref_data.html","id":null,"dir":"Reference","previous_headings":"","what":"get_ref_data — get_ref_data","title":"get_ref_data — get_ref_data","text":"reads requested reference data ref set associated CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_ref_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_ref_data — get_ref_data","text":"","code":"get_ref_data(data_dir_or_cesa, datatype)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_refset_dirs.html","id":null,"dir":"Reference","previous_headings":"","what":"get_refset_dirs — get_refset_dirs","title":"get_refset_dirs — get_refset_dirs","text":"returns character vector mapping ref set names data directories","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_refset_dirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_refset_dirs — get_refset_dirs","text":"","code":"get_refset_dirs()"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_sample_info.html","id":null,"dir":"Reference","previous_headings":"","what":"View sample metadata — get_sample_info","title":"View sample metadata — get_sample_info","text":"returns data.table info samples CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_sample_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View sample metadata — get_sample_info","text":"","code":"get_sample_info(cesa = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_sample_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View sample metadata — get_sample_info","text":"cesa CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_signature_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get table of signature attributions — get_signature_weights","title":"Get table of signature attributions — get_signature_weights","text":"View SNV signature attributions associated CESAnalysis samples.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_signature_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get table of signature attributions — get_signature_weights","text":"","code":"get_signature_weights(cesa = NULL, raw = F, artifacts_zeroed = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_signature_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get table of signature attributions — get_signature_weights","text":"cesa CESAnalysis object raw Default FALSE. TRUE, return raw signature attributions found signature extraction tool. Format may vary tool. artifacts_zeroed Deprecated.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_signature_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get table of signature attributions — get_signature_weights","text":"data.table signature attributions sample. default,   estimated relative weights biologically-associated signatures (.e., non-artifact   signatures) sum 1.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_signature_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get table of signature attributions — get_signature_weights","text":"Use raw = TRUE get signature attributions produced signature extraction tool (provided user set_signature_weights()), without adjustments made cancereffectsizeR's trinuc_mutation_rates().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_trinuc_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get estimated relative rates of trinucleotide-specific SNV mutation — get_trinuc_rates","title":"Get estimated relative rates of trinucleotide-specific SNV mutation — get_trinuc_rates","text":"Get estimated relative rates trinucleotide-specific SNV mutation","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_trinuc_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get estimated relative rates of trinucleotide-specific SNV mutation — get_trinuc_rates","text":"","code":"get_trinuc_rates(cesa = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/get_trinuc_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get estimated relative rates of trinucleotide-specific SNV mutation — get_trinuc_rates","text":"cesa CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/identify_maf_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate MAF data with variant types and variant IDs — identify_maf_variants","title":"Annotate MAF data with variant types and variant IDs — identify_maf_variants","text":"Annotate MAF data variant types variant IDs","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/identify_maf_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate MAF data with variant types and variant IDs — identify_maf_variants","text":"","code":"identify_maf_variants(maf)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/identify_maf_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate MAF data with variant types and variant IDs — identify_maf_variants","text":"maf validated data.table MAF-like columns","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/identify_maf_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate MAF data with variant types and variant IDs — identify_maf_variants","text":"input table variant_type variant_id columns","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/list_ces_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"list_ces_covariates — list_ces_covariates","title":"list_ces_covariates — list_ces_covariates","text":"Prints names available built-covariate data sets loaded CES genomes","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/list_ces_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list_ces_covariates — list_ces_covariates","text":"","code":"list_ces_covariates()"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/list_ces_refsets.html","id":null,"dir":"Reference","previous_headings":"","what":"list_ces_refsets — list_ces_refsets","title":"list_ces_refsets — list_ces_refsets","text":"Prints names built-reference data sets","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/list_ces_refsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list_ces_refsets — list_ces_refsets","text":"","code":"list_ces_refsets()"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/list_ces_signature_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"list_ces_signature_sets — list_ces_signature_sets","title":"list_ces_signature_sets — list_ces_signature_sets","text":"Prints names available mutational signature sets. Just clear, calling ces_signature_sets ready use cancereffectsizeR. derive signature sets.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/list_ces_signature_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list_ces_signature_sets — list_ces_signature_sets","text":"","code":"list_ces_signature_sets()"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_cesa.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a previously saved CESAnalysis — load_cesa","title":"Load a previously saved CESAnalysis — load_cesa","text":"Load previously saved CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_cesa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a previously saved CESAnalysis — load_cesa","text":"","code":"load_cesa(file)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_cesa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a previously saved CESAnalysis — load_cesa","text":"file filename/path CESAnalysis saved saveRDS, expected end .rds","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_maf.html","id":null,"dir":"Reference","previous_headings":"","what":"Load MAF somatic mutation data — load_maf","title":"Load MAF somatic mutation data — load_maf","text":"Load MAF data text file data table CESAnalysis. Column names expected match MAF format specifications (Chromosome, Start_Position, etc.). recommended use preload_maf() prep input (including, optionally, liftOver conversion genomic coordinates), clean MAF data, can run function directly. default, data assumed derived whole-exome sequencing. Whole-genome data targeted sequencing data also supported coverage option specified.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_maf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load MAF somatic mutation data — load_maf","text":"","code":"load_maf(   cesa = NULL,   maf = NULL,   maf_name = character(),   coverage = \"exome\",   covered_regions = NULL,   covered_regions_name = NULL,   covered_regions_padding = 0,   group_col = NULL,   sample_data_cols = character(),   enforce_default_exome_coverage = FALSE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_maf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load MAF somatic mutation data — load_maf","text":"cesa CESAnalysis. maf Path tab-delimited text file MAF format, MAF data.table data.frame format. maf_name Optionally, name identify samples coming current MAF. Used populate maf_source field CESAnalysis samples table. coverage exome, genome, targeted (default exome). covered_regions optional exome, required targeted: GRanges object BED file covered intervals matching CESAnalysis genome. covered_regions_name name describing covered regions (e.g., \"my_custom_targeted_regions\"); required covered_regions supplied. covered_regions_padding many bases (default 0) expand start end covered_regions interval, include variants called just outside targeted regions. Consider setting 0-100bp, sequencing read length. input data trimmed targeted regions, leave set 0. group_col column MAF sample group labels (deprecated; longer needed). sample_data_cols MAF columns containing sample-level data (e.g., tumor grade) like copied CESAnalysis samples table. enforce_default_exome_coverage loading default exome data, exclude records covered default exome capture intervals included CES genome reference data (default FALSE).","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_maf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load MAF somatic mutation data — load_maf","text":"CESAnalysis specified MAF data loaded. MAF data table includes   CES-generated variant IDs, list genes overlapping site, top_gene   top_consequence columns give significant annotated coding changes   mutation record. Annotation precedence determined MAF prevalence (usually   equal), essential splice status, premature stop codon, nonsilent status, MAF mutation   prevalence across transcript (often favors longer transcripts), finally   alphabetical order. columns recalculated data loaded, changes   MAF prevalence can change variants highlighted. Note  [CESAnalysis]$variants contains information top_consequence   variants noncoding variants MAF.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add sample data — load_sample_data","title":"Add sample data — load_sample_data","text":"Insert sample-level data CESAnalysis samples table.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add sample data — load_sample_data","text":"","code":"load_sample_data(cesa, sample_data)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/load_sample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add sample data — load_sample_data","text":"cesa CESAnalysis sample_data data.table data.frame Unique_Patient_Identifier column match CESAnalysis samples table, one row per sample. (okay samples present table.)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/lollipops.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot selection intensities — lollipops","title":"Plot selection intensities — lollipops","text":"Lollipop plots can used compare highly selected variants within among groups samples.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/lollipops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot selection intensities — lollipops","text":"","code":"lollipops(   si_list,   title = \"My SIs\",   ylab = \"selection intensity\",   max_sites = 50,   label_size = 3,   merge_dist = 0.04,   si_col = \"auto\",   group_names = \"auto\" )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/lollipops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot selection intensities — lollipops","text":"si_list Selection output table named list selection output tables. table columns called \"variant_name\", \"variant_type\", \"gene\", plus selection intensity column (columns, column values plotted separate lollipop.) title Plot title pass ggplot. ylab Y-axis label pass ggplot. max_sites Maximum number variant sites include per lollipop; try include many, may challenge getting look good. label_size Text size labels, either 1-length length si_list. merge_dist close points must eligible labels combined (.04 = 4 percent plot space). Either 1-length length si_list. Try tweaking labels looking good. Set zero prevent labels combined. si_col Vector giving names selection intensity column SI table, either 1-length length si_list. group_names Names use labeling group selection intensities.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/lollipops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot selection intensities — lollipops","text":"ggplot object lollipops","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/lollipops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot selection intensities — lollipops","text":"keep lollipops readable, max_sites variants shown group. time, SIs within limits output plot depicted (means specification max_sites creates implicit SI floor). labels look good, may reduce max_sites break  plot pieces. (find better way get lots variant labels display nicely, love hear !)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/maf_records.html","id":null,"dir":"Reference","previous_headings":"","what":"View data loaded into CESAnalysis — maf_records","title":"View data loaded into CESAnalysis — maf_records","text":"returns data.table containing MAF records used given CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/maf_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View data loaded into CESAnalysis — maf_records","text":"","code":"maf_records(cesa = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/maf_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View data loaded into CESAnalysis — maf_records","text":"cesa CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_epistasis_lik.html","id":null,"dir":"Reference","previous_headings":"","what":"pairwise_epistasis_lik — pairwise_epistasis_lik","title":"pairwise_epistasis_lik — pairwise_epistasis_lik","text":"pair variants (two groups variants), creates likelihood function model pairwise epistasis \"strong mutation, weak selection\" assumption.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_epistasis_lik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pairwise_epistasis_lik — pairwise_epistasis_lik","text":"","code":"pairwise_epistasis_lik(with_just_1, with_just_2, with_both, with_neither)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_epistasis_lik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pairwise_epistasis_lik — pairwise_epistasis_lik","text":"with_just_1 two-item list baseline rates v1/v2 tumors mutation just first variant(s) with_just_2 two-item list baseline rates v1/v2 tumors mutation just second variant(s) with_both two-item list baseline rates v1/v2 tumors mutation with_neither two-item list baseline rates v1/v2 tumors mutation n neither","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_epistasis_lik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pairwise_epistasis_lik — pairwise_epistasis_lik","text":"likelihood function","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_epistasis_lik.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pairwise_epistasis_lik — pairwise_epistasis_lik","text":"arguments function automatically supplied ces_epistasis() ces_gene_epistasis().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_gene_epistasis.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate SIs at gene level under pairwise epistasis model — pairwise_gene_epistasis","title":"Calculate SIs at gene level under pairwise epistasis model — pairwise_gene_epistasis","text":"genes assumed overlap ranges (calling function checks )","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_gene_epistasis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate SIs at gene level under pairwise epistasis model — pairwise_gene_epistasis","text":"","code":"pairwise_gene_epistasis(cesa, genes, samples, conf)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_gene_epistasis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate SIs at gene level under pairwise epistasis model — pairwise_gene_epistasis","text":"cesa CESAnalysis genes two-length vector gene names samples validated sample subset, select_samples() conf confidence level (0, 1)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_variant_epistasis.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate SIs at variant level under pairwise epistasis model — pairwise_variant_epistasis","title":"Calculate SIs at variant level under pairwise epistasis model — pairwise_variant_epistasis","text":"Calculate SIs variant level pairwise epistasis model","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_variant_epistasis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate SIs at variant level under pairwise epistasis model — pairwise_variant_epistasis","text":"","code":"pairwise_variant_epistasis(   cesa,   variant_pair,   samples,   conf,   compound_variants = NULL )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/pairwise_variant_epistasis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate SIs at variant level under pairwise epistasis model — pairwise_variant_epistasis","text":"cesa CESAnalysis variant_pair 2-length character variant IDs, 2-length numeric giving indices CompoundVariantSet current two compound variants samples Validated samples data.table (select_samples()) compound_variants testing pair compound variants, CompoundVariantSet defining ","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/preload_maf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and verify MAF somatic mutation data — preload_maf","title":"Read and verify MAF somatic mutation data — preload_maf","text":"Reads MAF-formatted data text file data table, checks problems, provides quality check annotations (available). core MAF columns standard names (Chromosome, Start_Position, etc., Tumor_Sample_Barcode used sample ID column), can supply column names. data loading different genome build chosen reference data set (refset) can use chain_file option supply UCSC-style chain file, MAF coordinates automatically converted rtracklayer's version liftOver.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/preload_maf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and verify MAF somatic mutation data — preload_maf","text":"","code":"preload_maf(   maf = NULL,   refset = NULL,   coverage_intervals_to_check = NULL,   chain_file = NULL,   sample_col = \"Unique_Patient_Identifier\",   chr_col = \"Chromosome\",   start_col = \"Start_Position\",   ref_col = \"Reference_Allele\",   tumor_allele_col = \"guess\",   keep_extra_columns = FALSE,   detect_hidden_mnv = TRUE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/preload_maf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and verify MAF somatic mutation data — preload_maf","text":"maf Path tab-delimited text file MAF format, data.table/data.frame MAF data refset name reference data set (refset) use; run list_ces_refsets() available refsets. Alternatively, path custom reference data directory. coverage_intervals_to_check available, BED file GRanges object represented expected coverage intervals sequencing method used generate MAF data. Unless coverage intervals incorrect, records covered. Output show far away uncovered records covered regions, can inform whether use covered_regions_padding option load_maf(). (example, variant callers identify variants 100bp target regions, may want pad covered intervals allow variants remain data. Alternatively, records already covered, calls probably already trimmed coverage intervals, means padding added.) chain_file LiftOver chain file (text format, name ends .chain) convert MAF records genome build used CESAnalysis. sample_col column name patient ID; defaults Unique_Patient_Identifier, , absence, Tumor_Sample_Barcode chr_col column name chromosome data  (Chromosome) start_col column name start position (Start_Position) ref_col column name reference allele data (Reference_Allele) tumor_allele_col column name alternate allele data; default, values Tumor_Seq_Allele2 Tumor_Seq_Allele1 columns used keep_extra_columns TRUE/FALSE load data columns needed cancereffectsizeR, vector column names keep. detect_hidden_mnv Find -sample adjacent SNVs replace records DBS (doublet base substitution) records. Also, find groups -sample variants within 2 bp replace records MNV (multi-nucleotide variant) records.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/preload_maf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and verify MAF somatic mutation data — preload_maf","text":"data.table MAF data, problematic records flagged   quality-control annotations (available chosen refset data).","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/preload_maf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and verify MAF somatic mutation data — preload_maf","text":"ces.refset.hg19 ces.refset.hg38 refsets provides three annotations may consider using quality filtering MAF records: cosmic_site_tier Indicates variant's position overlaps mutation COSMIC v92's Cancer Mutation Census. Mutations classified Tier 1, Tier 2, Tier 3, . Note MAF mutation necessarily census. See COSMIC's website tier definitions. germline_variant_site variant's position overlaps site common germline variation. Roughly, means gnomAD 2.1.1 shows overlapping germline variant greater 1% prevalence population. repetitive_region variant overlaps site marked repetitive sequence RepeatMasker tool (data taken UCSC Table Browser). Variant calls repetitive sites frequently reflect sequencing calling error.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/preload_ref_data.html","id":null,"dir":"Reference","previous_headings":"","what":"preload_ref_data — preload_ref_data","title":"preload_ref_data — preload_ref_data","text":"Used loading creating CESAnalysis load reference environment quick access","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/preload_ref_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"preload_ref_data — preload_ref_data","text":"","code":"preload_ref_data(data_dir)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/read_in_maf.html","id":null,"dir":"Reference","previous_headings":"","what":"Load MAF somatic mutation data — read_in_maf","title":"Load MAF somatic mutation data — read_in_maf","text":"Load MAF data text file data table CESAnalysis. column names match MAF format specifications (Chromosome, Start_Position, etc., Tumor_Sample_Barcode used sample ID column), can supply column names. CESAnalysis defined sample groups (see ?CESAnalysis), specify \"group_col\". default, data assumed derived whole-exome sequencing. Whole-genome data targeted sequencing data also supported \"coverage\" option specified. data loading different genome build CESAnalysis, can use \"chain_file\" option supply UCSC-style chain file, MAF coordinates automatically converted rtracklayer's version liftOver.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/read_in_maf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load MAF somatic mutation data — read_in_maf","text":"","code":"read_in_maf(   maf,   refset_env,   chr_col = \"Chromosome\",   start_col = \"Start_Position\",   ref_col = \"Reference_Allele\",   tumor_allele_col = \"guess\",   sample_col = \"Unique_Patient_Identifier\",   more_cols = NULL,   chain_file = NULL,   separate_old_problems = FALSE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/read_in_maf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load MAF somatic mutation data — read_in_maf","text":"maf Path tab-delimited text file MAF format, MAF data.table data.frame format refset_env refset data environment chr_col column name chromosome data  (Chromosome) start_col column name start position (Start_Position) ref_col column name reference allele data (Reference_Allele) tumor_allele_col column name alternate allele data; default, values Tumor_Seq_Allele2 Tumor_Seq_Allele1 columns used. sample_col column name sample ID data (Tumor_Sample_Barcode Unique_Patient_Identifier) chain_file LiftOver chain file (text format, name ends .chain) convert MAF records genome build used CESAnalysis. separate_old_problems TRUE (used load_maf), respect old problems look like came cancereffectsizeR (typically preload_maf). get separated \"old_problem\", records checked. chain_file must NULL.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/read_in_maf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load MAF somatic mutation data — read_in_maf","text":"data.table core MAF columns, requested columns, \"problem\" column","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/read_vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal VCF parser — read_vcf","title":"Internal VCF parser — read_vcf","text":"Used vcfs_to_maf_table()","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/read_vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal VCF parser — read_vcf","text":"","code":"read_vcf(vcf, sample_id, vcf_name = sample_id)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/read_vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal VCF parser — read_vcf","text":"vcf VCF filename VCF-like data.table. sample_id 1-length sample identifier. vcf_name 1-length identifier used user messages.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/read_vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal VCF parser — read_vcf","text":"MAF-like data.table","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_deconstructSigs.html","id":null,"dir":"Reference","previous_headings":"","what":"cancereffectsizeR wrapper for deconstructSigs — run_deconstructSigs","title":"cancereffectsizeR wrapper for deconstructSigs — run_deconstructSigs","text":"function gets called internally trinuc_mutation_rates() tumor CESAnalysis, accepting data.frame mutation counts returning data.frame signature weights.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_deconstructSigs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cancereffectsizeR wrapper for deconstructSigs — run_deconstructSigs","text":"","code":"run_deconstructSigs(   tumor_trinuc_counts,   signatures_df,   signatures_to_remove,   tri.counts.method )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_deconstructSigs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cancereffectsizeR wrapper for deconstructSigs — run_deconstructSigs","text":"tumor_trinuc_counts one-row data.frame trinuc variant counts (deconstructSigs order) one tumor signatures_df data.frame signatures (see COSMIC v3 signatures included package format) signatures_to_remove names signatures signatures_df keep deconstructSigs assign zero weights tri.counts.method exome/genome trinucleotide content normalization argument pass deconstructSigs (see docs)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_deconstructSigs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cancereffectsizeR wrapper for deconstructSigs — run_deconstructSigs","text":"data.frame signature weights","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_dndscv.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to run dNdScv — run_dndscv","title":"Internal function to run dNdScv — run_dndscv","text":"Internal function run dNdScv","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_dndscv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to run dNdScv — run_dndscv","text":"","code":"run_dndscv(mutations, gene_list, cv, refdb, gr_genes, ...)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_mutational_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"cancereffectsizeR wrapper for fit_to_signatures — run_mutational_patterns","title":"cancereffectsizeR wrapper for fit_to_signatures — run_mutational_patterns","text":"function gets called internally trinuc_mutation_rates() tumor CESAnalysis, accepting data.frame mutation counts returning fit_to_signatures output. Note: function supports indels passed format.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_mutational_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cancereffectsizeR wrapper for fit_to_signatures — run_mutational_patterns","text":"","code":"run_mutational_patterns(   tumor_trinuc_counts,   signatures_df,   signatures_to_remove,   mp_strict_args = list(),   bootstrap_mutations = FALSE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_mutational_patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cancereffectsizeR wrapper for fit_to_signatures — run_mutational_patterns","text":"tumor_trinuc_counts matrix trinuc variant counts columns respond tumors  order trinucleotide changes match signatures_df signatures_df data.frame signatures (see COSMIC v3 signatures included package format) signatures_to_remove names signatures signatures_df keep MutationalPatterns assign zero weights. occurs strict == FALSE mp_strict_args named list additional arguments fit_to_signatures_strict bootstrap_mutations T/F (default FALSE) whether run fit_to_signatures_bootstrapped() n_boot = 1 instead fit_to_signatures_strict().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/run_mutational_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cancereffectsizeR wrapper for fit_to_signatures — run_mutational_patterns","text":"data.frame signature weights","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/samples_with.html","id":null,"dir":"Reference","previous_headings":"","what":"Find samples with specified variants — samples_with","title":"Find samples with specified variants — samples_with","text":"convenience function identify samples specific variants.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/samples_with.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find samples with specified variants — samples_with","text":"","code":"samples_with(cesa, any_of = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/samples_with.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find samples with specified variants — samples_with","text":"cesa CESAnalysis any_of Select samples given variant names/IDs, c(\"8:142506482_C>G\", \"KRAS G12C\"). gene multiple transcripts reference data, may wish use full IDs, \"KRAS_G12C_ENSP00000256078\".","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/save_cesa.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a CESAnalysis in progress — save_cesa","title":"Save a CESAnalysis in progress — save_cesa","text":"Saves CESAnalysis file calling using base R's saveRDS function. Also updates run history reproducibility. Files saved reloaded load_cesa().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/save_cesa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a CESAnalysis in progress — save_cesa","text":"","code":"save_cesa(cesa, file)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/save_cesa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a CESAnalysis in progress — save_cesa","text":"cesa CESAnalysis save file filename save (must end .rds)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/save_cesa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a CESAnalysis in progress — save_cesa","text":"Note genome reference data associated CESAnalysis (refset) actually part CESAnalysis, saved . (Saving data analysis make file sizes large.) reload CESAnalysis, can re-associate correct reference data.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve validated subset of CESAnalysis samples table — select_samples","title":"Retrieve validated subset of CESAnalysis samples table — select_samples","text":"Retrieve validated subset CESAnalysis samples table","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve validated subset of CESAnalysis samples table — select_samples","text":"","code":"select_samples(cesa = NULL, samples = character())"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve validated subset of CESAnalysis samples table — select_samples","text":"cesa CESAnalysis samples Vector Unique_Patient_Identifiers, data.table consisting rows CESAnalysis samples table. empty, returns full sample table.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve validated subset of CESAnalysis samples table — select_samples","text":"data.table consisting one rows CESAnalysis samples table.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Select and filter variants — select_variants","title":"Select and filter variants — select_variants","text":"function helps find view variant data CESAnalysis's MAF data mutation annotation tables. default, almost amino-acid-change mutations noncoding SNVs returned. can apply series filters restrict output certain genes genomic regions require minimum variant frequency MAF data. can also specify variants include output regardless filters variant_ids. Special behavior: variant_ids used , specified variants returned.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select and filter variants — select_variants","text":"","code":"select_variants(   cesa,   genes = NULL,   min_freq = 0,   variant_ids = NULL,   gr = NULL,   variant_position_table = NULL,   include_subvariants = F,   padding = 0,   collapse_lists = F,   remove_secondary_aac = TRUE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select and filter variants — select_variants","text":"cesa CESAnalysis MAF data loaded annotated (e.g., load_maf()) genes Filter variants specified genes. min_freq Filter variants MAF frequency threshold (default 0). Note variants annotation tables never returned. Use add_variants() include variants absent MAF data CESAnalysis. variant_ids Vector variant IDs include output regardless filtering options. can use CES-style AAC SNV IDs variant names like  \"KRAS G12C\". argument used (without filtering arguments), specified variants returned. gr Filter variants within input GRanges +/- padding bases. variant_position_table Filter variants intersect positions given chr/start/end table (1-based closed coordinates). Typically, table comes previous select_variants call can expanded padding. (Gritty detail: Amino acid change SNVs get special handling. precise positions start, end, center_nt_pos used. avoids intersecting extra variants start/end, splice-site-spanning variants can many thousands.) include_subvariants mutations \"contain\" mutations. example, cancereffectsizeR's ces.refset.hg19, KRAS_Q61H contains two constituent SNVs cause amino acid change: 12:25380275_T>G 12:25380275_T>. include_subvariants = F (default), genes = \"KRAS\", output returned KRAS_Q61H two SNVs (although IDs appear Q61H output). Set true, three variants included output,  assuming get filtered options, like min_freq. set TRUE, directly plug output table selection functions. However, can pick non-overlapping set variant IDs output table  re-run select_variants() put variants new table selection functions. padding add +/- many bases every range specified gr variant_position_table (stopping chromosome ends, naturally). collapse_lists output columns may multiple elements per variant row. example, all_genes may include multiple genes. variable-length vectors allow advanced filtering manipulation, syntax can tricky. Optionally, set collapse_lists = T convert columns comma-delimited strings, sometimes easier work . remove_secondary_aac Default TRUE, except overridden (effectively FALSE) include_subvariants = T. Due overlapping coding region definitions reference data (e.g., genes multiple transcripts), site can one amino-acid-change annotation. avoid returning genome-positional variants multiple times, default return one AAC situations. Tiebreakers MAF prevalence, essential splice site status, premature stop codon, non-silent status, gene/protein mutation count, alphabetical. set remove_secondary_aac FALSE, put output variant table selection calculation functions. alternative set FALSE, pick (non-overlapping) variants want, re-run select_variants() variants specified variant_ids.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select and filter variants — select_variants","text":"data table info selected variants (see details), list IDs.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/select_variants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select and filter variants — select_variants","text":"variants present CESAnalysis's annotation tables can returned, default present MAF data. select variants absent MAF data, must first call add_variants() add CESAnalysis. Note intergenic SNVs nearest genes annotated SNV tables, variants captured gene-based selection function, since actually gene. Definitions less self-explanatory columns: variant_name: short, often necessarily uniquely identifying name (use   variant_id guarantee uniqueness) start/end: lowest/highest genomic positions overlapping variant variant_id: unique IDs variants given associated genome assembly version transcript data ref/alt: genomic reference alternate alleles (genomic   variants; NA AACs) gene: affected gene AACs; SNVs,   overlapping gene (arbitrary gene one overlaps), nearest gene   intergenic SNVs strand: AACs, 1 reference sequence strand coding strand; -1 otherwise essential_splice: Variant 1,2 bp upstream   1,2,5 bp downstream annotated splice position (edge case: SNV   multiple gene/transcript annotations, say one essential ) intergenic: variant overlap coding regions reference data trinuc_mut: SNVs, reference trinucleotide context, deconstructSigs notation coding_seq: coding strand nucleotides order transcription center_nt_pos: regardless strand, start/end give positions two three AAC nucleotides;                       gives position center nucleotide (maybe useful AAC spans splice site) constituent_snvs: SNVs can produce given variant multi_anno_site: T/F whether variant multiple gene/transcript/AAC annotations all_genes: genes overlapping variant reference data maf_prevalence: number occurrences variant MAF data samples_covering: number MAF samples sequencing coverage variant site","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_gene_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign pre-calculated regional mutation rates — set_gene_rates","title":"Assign pre-calculated regional mutation rates — set_gene_rates","text":"function allows specify regional rates mutation--calculated however like--samples CESAnalysis. Rates can assigned samples samples specified sample_group labels (see ?CESAnalysis).","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_gene_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign pre-calculated regional mutation rates — set_gene_rates","text":"","code":"set_gene_rates(   cesa = NULL,   rates = NULL,   samples = character(),   missing_genes_take_nearest = FALSE,   sample_group = NULL )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_gene_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign pre-calculated regional mutation rates — set_gene_rates","text":"cesa CESAnalysis object rates two-column data.table either gene name protein_id column 1 rate column 2 samples samples input rates apply . Defaults samples. Can vector Unique_Patient_Identifiers, data.table containing rows CESAnalysis sample table. missing_genes_take_nearest Set TRUE gene/protein_id missing rates take rate nearest non-missing gene/protein. sample_group (Deprecated; use samples.) Character vector giving sample group(s) rates apply .","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_gene_rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign pre-calculated regional mutation rates — set_gene_rates","text":"Provide rates data.table two columns: gene name protein ID (character) rate (numeric, non-negative). Gene names protein IDs must match CESAnalysis reference data. (reference data sets, ces.refset.hg19, allow gene-level rates.) want supply rates every gene, set missing_genes_take_nearest = T missing gene coding region take rate nearest non-missing one.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_refset_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Set reference data directory — set_refset_dir","title":"Set reference data directory — set_refset_dir","text":"working custom reference data loading previously saved CESAnalysis new environment, use function reassociate location reference data analysis. (load_cesa() give warning loading analysis, probably need use function.)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_refset_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set reference data directory — set_refset_dir","text":"","code":"set_refset_dir(cesa, dir)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_refset_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set reference data directory — set_refset_dir","text":"cesa CESAnalysis dir path data directory","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_signature_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Set SNV signature weights — set_signature_weights","title":"Set SNV signature weights — set_signature_weights","text":"wish use method calculate sample-specific SNV signature weights (opposed signature extraction built trinuc_mutation_rates()), can use function load CESAnalysis. input signatures used infer relative trinucleotide-context-specific mutation rates tumors. (means can run set_signature_weights() set_trinuc_rates(), .) trinuc_mutation_rates(), can use built-set signatures, COSMIC_v3.1, can supply signature set definitions documented ?trinuc_mutation_rates.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_signature_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set SNV signature weights — set_signature_weights","text":"","code":"set_signature_weights(   cesa,   signature_set,   weights,   ignore_extra_samples = FALSE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_signature_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set SNV signature weights — set_signature_weights","text":"cesa CESAnalysis signature_set signature set name (see list_ces_signature_sets()), custom signature set (see documentation trinuc_mutation_rates()) weights data.table relative signature weights sample (see details) ignore_extra_samples skip samples input table CESAnalysis (false, stop error)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_signature_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set SNV signature weights — set_signature_weights","text":"input data table must Unique_Patient_Identifier column one column per signature signature set. samples CESAnalysis must included input table, sample's weights sum (0, 1]. Since weights used cancereffectsizeR infer trinucleotide-context-specific relative rates SNV mutations, sample must least one non-artifact signature nonzero weight. (unlikely event problem, consider assigning group-average signature weights artifact-samples.)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_trinuc_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign pre-calculated relative trinucleotide mutation rates — set_trinuc_rates","title":"Assign pre-calculated relative trinucleotide mutation rates — set_trinuc_rates","text":"function assigns trinucleotide-context-specific relative SNV mutation rates tumors CESAnalysis. (rates previously generated trinuc_mutation_rates(), calculated using methods.) input rates must data.table matrix. supplying data table, must Unique_Patient_Identifier column; supplying matrix, identifiers supplied rownames instead. Either way, samples CESAnalysis must represented input rates. avoid user error, superfluous samples input rates unless ignore_extra_samples = T. Besides identifier column (matrix rownames), must 96 columns, column names exactly matching deconstructSigs/MutationalPatterns naming order (run function incorrect column names, names need use printed). Since CES uses relative trinuc rates, rows must sum 1, values greater 0. get warning rate less 1e-9, since (unrealistically) low rates may crash selection model likelihood functions expecting small values.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_trinuc_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign pre-calculated relative trinucleotide mutation rates — set_trinuc_rates","text":"","code":"set_trinuc_rates(cesa, trinuc_rates, ignore_extra_samples = FALSE)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/set_trinuc_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign pre-calculated relative trinucleotide mutation rates — set_trinuc_rates","text":"cesa CESAnalysis object trinuc_rates matrix data table (see description format) ignore_extra_samples skip samples input table CESAnalysis (false, stop error)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/snv_results.html","id":null,"dir":"Reference","previous_headings":"","what":"View results from ces_variant — snv_results","title":"View results from ces_variant — snv_results","text":"returns list ces_variant() results tables, variant annotations added","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/snv_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View results from ces_variant — snv_results","text":"","code":"snv_results(cesa = NULL)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/snv_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View results from ces_variant — snv_results","text":"cesa CESAnalysis object","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sort_and_validate_variant_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort and validate input variant IDs — sort_and_validate_variant_ids","title":"Sort and validate input variant IDs — sort_and_validate_variant_ids","text":"Sorts input variant IDs type, completes IDs adding protein ID plain variant names (e.g. \"KRAS G12C\"), ensures IDs valid even present annotations. includes verifying reference alleles correct SNV IDs amino-acid-changes possible given coding sequence.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sort_and_validate_variant_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort and validate input variant IDs — sort_and_validate_variant_ids","text":"","code":"sort_and_validate_variant_ids(cesa, input_ids, drop_unannotated = FALSE)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sort_and_validate_variant_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort and validate input variant IDs — sort_and_validate_variant_ids","text":"cesa CESAnalysis input_ids Variant names/IDs, typically user. drop_unannotated Whether include variants annotated output.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sort_and_validate_variant_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort and validate input variant IDs — sort_and_validate_variant_ids","text":"List variant_ids, element corresponding one variant_type.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sswm_lik.html","id":null,"dir":"Reference","previous_headings":"","what":"sswm_lik — sswm_lik","title":"sswm_lik — sswm_lik","text":"Generates log-likelihood function site-level selection \"strong selection, weak mutation\" assumption. arguments likelihood function factory automatically supplied ces_variant().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sswm_lik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sswm_lik — sswm_lik","text":"","code":"sswm_lik(rates_tumors_with, rates_tumors_without)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sswm_lik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sswm_lik — sswm_lik","text":"rates_tumors_with vector site-specific mutation rates tumors variant rates_tumors_without vector site-specific mutation rates eligible tumors without variant","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sswm_sequential_lik.html","id":null,"dir":"Reference","previous_headings":"","what":"sswm_sequential_lik — sswm_sequential_lik","title":"sswm_sequential_lik — sswm_sequential_lik","text":"sswm_lik, selection intensities calculated variant sites \"strong selection, weak mutation\" assumption. version, sample assigned one ordered set disease progression states, selection assumed vary across states. example, two-state local/metastatic model, variant two independent selection intensities. Metastatic samples acquired variant current state earlier time, local state selection intensity applied.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sswm_sequential_lik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sswm_sequential_lik — sswm_sequential_lik","text":"","code":"sswm_sequential_lik(rates_tumors_with, rates_tumors_without, sample_index)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sswm_sequential_lik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sswm_sequential_lik — sswm_sequential_lik","text":"rates_tumors_with named vector site-specific mutation rates tumors variant rates_tumors_without named vector site-specific mutation rates eligible tumors without variant sample_index data.table columns Unique_Patient_Identifier, group_name, group_index","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/sswm_sequential_lik.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sswm_sequential_lik — sswm_sequential_lik","text":"arguments likelihood function factory automatically supplied ces_variant().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/suggest_cosmic_signature_exclusions.html","id":null,"dir":"Reference","previous_headings":"","what":"Tissue-specific mutational signature exclusions — suggest_cosmic_signature_exclusions","title":"Tissue-specific mutational signature exclusions — suggest_cosmic_signature_exclusions","text":"Get suggestions signatures_to_remove trinuc_mutation_rates COSMIC signatures v3 later. details, see article website.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/suggest_cosmic_signature_exclusions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tissue-specific mutational signature exclusions — suggest_cosmic_signature_exclusions","text":"","code":"suggest_cosmic_signature_exclusions(   cancer_type = NULL,   treatment_naive = NULL,   quiet = FALSE )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/suggest_cosmic_signature_exclusions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tissue-specific mutational signature exclusions — suggest_cosmic_signature_exclusions","text":"cancer_type See supported cancer type labels. treatment_naive give TRUE samples taken pre-treatment; FALSE leave NULL otherwise. quiet (default false) non-interactive use, suppress explanations advice.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/suggest_cosmic_signature_exclusions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tissue-specific mutational signature exclusions — suggest_cosmic_signature_exclusions","text":"vector signatures feed trinuc_mutation_rates() signature_exclusions argument.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/suggest_cosmic_signatures_to_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Previous name of suggest_cosmic_signature_exclusions — suggest_cosmic_signatures_to_remove","title":"Previous name of suggest_cosmic_signature_exclusions — suggest_cosmic_signatures_to_remove","text":"function renamed suggest_cosmic_signature_exclusions(). now, calling old name simply pass arguments along new version. eventually removed.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/suggest_cosmic_signatures_to_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Previous name of suggest_cosmic_signature_exclusions — suggest_cosmic_signatures_to_remove","text":"","code":"suggest_cosmic_signatures_to_remove(...)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_mutation_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relative rates of trinucleotide-context-specific mutations by extracting underlying mutational processes — trinuc_mutation_rates","title":"Calculate relative rates of trinucleotide-context-specific mutations by extracting underlying mutational processes — trinuc_mutation_rates","text":"function calculates expected relative rates trinucleotide-context-specific SNV mutations within tumors attributing SNVs mutational processes represented mutation signature sets (\"COSMIC v3.2\"). Signature extraction can done MutationalPatterns (default) deconstructSigs. Tumors targeted sequencing data assigned average trinucleotide mutation rates calculated across exome/genome data, means need least exome genome data run.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_mutation_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relative rates of trinucleotide-context-specific mutations by extracting underlying mutational processes — trinuc_mutation_rates","text":"","code":"trinuc_mutation_rates(   cesa,   signature_set = NULL,   signature_exclusions = character(),   samples = character(),   cores = 1,   signature_extractor = \"MutationalPatterns\",   mp_strict_args = list(),   bootstrap_mutations = FALSE,   assume_identical_mutational_processes = FALSE,   sample_group = NULL,   sig_averaging_threshold = 50,   signatures_to_remove = NULL )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_mutation_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relative rates of trinucleotide-context-specific mutations by extracting underlying mutational processes — trinuc_mutation_rates","text":"cesa CESAnalysis object signature_set Name built-signature set (see list_ces_signature_sets()), custom signature set (see details) signature_exclusions Specify signatures exclude analysis; use suggest_cosmic_signature_exclusions() advice COSMIC signatures samples samples include current run. Defaults samples. Can vector Unique_Patient_Identifiers, data.table containing rows CESAnalysis sample table. cores many cores use processing tumors parallel. signature_extractor One \"MutationalPatterns\" (default) \"deconstructSigs\". mp_strict_args Named list arguments pass MutationalPatterns' fit_to_signatures_strict function. Note mut_matrix signatures arguments generated automatically, rather use strict method, can emulate fit_to_signatures() setting max_delta = 0. bootstrap_mutations T/F (default FALSE). Instead using actual SNV counts samples, single bootstrap sampling sample (words, run MutationalPatterns::fit_to_signatures_bootstrapped() n_boot=1). can useful intend run function multiple times get distribution signature attributions trinuc rates (downstream cancer effect sizes). option may replaced thorough support bootstrapping future. assume_identical_mutational_processes use well-mutated tumors (number eligible mutations meeting sig_averaging_threshold) calculate group average signature weights, assign (implied trinucleotide mutation rates) tumors sample_group (Deprecated; use samples.) Vector sample group(s) calculate rates . sig_averaging_threshold Mutation prevalence threshold (default 50) determines tumors inform calculation group-average signature weights. assume_identical_mutational_processes == FALSE (default), group averages blended signature weights sub-threshold tumors. signatures_to_remove Deprecated; use renamed argument signature_exclusions.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_mutation_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate relative rates of trinucleotide-context-specific mutations by extracting underlying mutational processes — trinuc_mutation_rates","text":"CESAnalysis sample-specific signature weights inferred   trinucleotide-context-specific relative mutation rates. snv_counts matrix gives   counts SNVs trinucleotide context samples CESAnalysis.   (recurrent mutations excluded signature analysis   trinuc_mutation_rates(), present snv_counts completeness.)   snv_counts matrix, produced `trinuc_snv_counts()`, can fed directly   MutationalPatterns wish run extended signature analysis. raw_attributions table contains signature attributions produced   MutationalPatterns deconstructSigs. biological_weights table several   differences:  Weights signatures associated artifactual (opposed biological) processes set zero. remaining weights normalized sum 1. Tumors mutations (defined `sig_averaging_threshold`, default = 50)   weights redefined using blend original weights weights   derived running signature extraction en masse tumors -threshold   mutation counts. samples identifiable filtering table   `group_avg_blended == TRUE`, recommend excluding downstream   signature analysis. (weights useful best   guess mutational processes, reported way   implies independence group-average weights.) Biological weights can interpreted follows: mutations caused   biological processes represented signatures, proportion mutations   attributed given signature weight. Either signature attributions table can converted matrix format used MutationalPatterns    `convert_signature_weights_for_mp()`.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_mutation_rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate relative rates of trinucleotide-context-specific mutations by extracting underlying mutational processes — trinuc_mutation_rates","text":"reduce influence selection estimation relative trinucleotide mutation rates, non-recurrent SNVs (appear one  sample current run) used. custom signature set given named three-item list, \"signatures\" pure data.frame signature definitions, \"name\" 1-length character naming set, \"metadata\" data.table \"Signature\" column matches rownames signature definitions. following columns allow special functionality: Etiology: Known hypothesized mutational processes underlying signature. Used  human-readable tables plots, best enter something like \"Unknown\" rather leaving entries empty NA Likely_Artifact (logical T/F): Marks signatures believed derive sample processing, sequencing, calling error, non-biological sources. cancereffectsizeR adjusts artifact signatures inferring relative trinucleotide mutation rates. Exome_Min: Minimum number mutations WES sample must presence signature plausible. information used prevent hypermutation signatures found tumors mutations. Can left NA 0 non-hypermutation signatures. column present, Genome_Min must present always greater equal Exome_Min. Genome_Min: Minimum number mutations WGS sample must presence signature plausible. information used prevent hypermutation signatures found tumors mutations. Can left NA 0 non-hypermutation signatures. column present, Exome_Min must present always less equal Genome_Min. metadata available signature set, empty data table can also supplied. template signature set object, run  sig_set = get_ces_signature_set(\"ces.refset.hg19\", \"COSMIC_v3.2\").","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_snv_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate SNVs by trinucleotide context — trinuc_snv_counts","title":"Tabulate SNVs by trinucleotide context — trinuc_snv_counts","text":"function produces trinucleotide-context-specific SNV counts MAF data input mutational signature extraction tools. Output can tailored meet formatting requirements MutationalPatterns deconstructSigs, probably similar formats used tools.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_snv_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate SNVs by trinucleotide context — trinuc_snv_counts","text":"","code":"trinuc_snv_counts(   maf,   genome,   exclude_recurrent = FALSE,   style = \"MutationalPatterns\" )"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_snv_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate SNVs by trinucleotide context — trinuc_snv_counts","text":"maf cancereffectsizeR-style MAF data table genome BSgenome reference genome (looking trinucleotide contexts) exclude_recurrent Default FALSE. TRUE, mutations private sample included counts, order reduce influence selection. (load MAF data CESAnalysis later, recurrency may change.) style \"MutationalPatterns\" \"deconstructSigs\"","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/trinuc_snv_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate SNVs by trinucleotide context — trinuc_snv_counts","text":"Matrix data frame SNV counts, suitable use MutationalPatterns   deconstructSigs. Samples zero passing SNVs appear.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/univariate_si_conf_ints.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate uniroot CIs on selection intensities — univariate_si_conf_ints","title":"Calculate uniroot CIs on selection intensities — univariate_si_conf_ints","text":"Given model fit, calculate univariate confidence intervals parameter. Returns list low/high bounds.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/univariate_si_conf_ints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate uniroot CIs on selection intensities — univariate_si_conf_ints","text":"","code":"univariate_si_conf_ints(fit, lik_fn, min_si, max_si, conf)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/univariate_si_conf_ints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate uniroot CIs on selection intensities — univariate_si_conf_ints","text":"fit bbmle lik_fn likelihood function min_si lower limit SI/CI max_si upper limit SI/CI conf e.g., .95 -> 95% CIs","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/update_covered_in.html","id":null,"dir":"Reference","previous_headings":"","what":"update_covered_in — update_covered_in","title":"update_covered_in — update_covered_in","text":"Updates covered_in annotation variants include covered regions CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/update_covered_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_covered_in — update_covered_in","text":"","code":"update_covered_in(cesa)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/update_covered_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_covered_in — update_covered_in","text":"cesa CESAnalysis","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/update_covered_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_covered_in — update_covered_in","text":"CESAnalysis regenerated covered-annotations","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/update_covered_in.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"update_covered_in — update_covered_in","text":"Also updates internal cached output select_variants().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_aac_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure AAC IDs are valid for a given reference data set — validate_aac_ids","title":"Ensure AAC IDs are valid for a given reference data set — validate_aac_ids","text":"Given vector AAC IDs, determines whether valid/possible, returning NULL valid, list problems, error input parseable.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_aac_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure AAC IDs are valid for a given reference data set — validate_aac_ids","text":"","code":"validate_aac_ids(aac_ids, refset)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_aac_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure AAC IDs are valid for a given reference data set — validate_aac_ids","text":"aac_ids AAC variant IDs refset reference data set (environment object)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_aac_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure AAC IDs are valid for a given reference data set — validate_aac_ids","text":"ID invalid gene /protein_id reference data, reference amino acid (\"G\" KRAS_G12C) incorrect, possible SNV can create proposed change. example, KRAS G12C possible codon (GGT) acquires G>T substitution first position, G12K possible single substitution can transform GGT lysine codon.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_signature_set.html","id":null,"dir":"Reference","previous_headings":"","what":"validate_signature_set — validate_signature_set","title":"validate_signature_set — validate_signature_set","text":"Checks custom CES signature properly formatted; stops error ","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_signature_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validate_signature_set — validate_signature_set","text":"","code":"validate_signature_set(signature_set)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_signature_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validate_signature_set — validate_signature_set","text":"signature_set signature set list (see docs format)","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_snv_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"validate_snv_ids — validate_snv_ids","title":"validate_snv_ids — validate_snv_ids","text":"Ensures SNV IDs valid given genome","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_snv_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validate_snv_ids — validate_snv_ids","text":"","code":"validate_snv_ids(snv_ids, bsg)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/validate_snv_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validate_snv_ids — validate_snv_ids","text":"snv_ids character vector snv_ids bsg BSgenome getting reference sequence","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/variant_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess variant prevalence and coverage — variant_counts","title":"Assess variant prevalence and coverage — variant_counts","text":"Determine variant prevalence (many samples sequencing coverage) across MAF data, within different groups samples.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/variant_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess variant prevalence and coverage — variant_counts","text":"","code":"variant_counts(cesa, variant_ids = character(), by = character())"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/variant_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess variant prevalence and coverage — variant_counts","text":"cesa CESAnalysis variant_ids variant names (\"KRAS G12C\") full variant IDs. left empty, uses non-overlapping variants returned `select_variants()` min_freq = 1. Optionally, vector one sample table columns. Variant prevalence coverage data broken groups defined unique combinations values columns.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/vcfs_to_maf_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a VCF into an MAF-like table — vcfs_to_maf_table","title":"Read a VCF into an MAF-like table — vcfs_to_maf_table","text":"function loads VCF files MAF-like tables. Tumor_Sample_Barcode column added, contents POS/REF/ALT fields converted match style used MAF files Start_Position/Reference_Allele/Tumor_Seq_Allele2. VCF file represent high-confidence somatic variant calls single tumor sample.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/vcfs_to_maf_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a VCF into an MAF-like table — vcfs_to_maf_table","text":"","code":"vcfs_to_maf_table(vcfs, sample_ids)"},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/vcfs_to_maf_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a VCF into an MAF-like table — vcfs_to_maf_table","text":"vcfs Vector VCF file paths, list VCF-like data.tables, single data.table. sample_ids Identifiers populate Tumor_Sample_Barcode, one per VCF.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/reference/vcfs_to_maf_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a VCF into an MAF-like table — vcfs_to_maf_table","text":"single data.table MAF-style fields, suitable use cancereffectsizeR.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-300","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 3.0.0","title":"cancereffectsizeR 3.0.0","text":"Patch releases (, x.y.1 → x.y.2) minor bug fixes small improvements significantly affect numerical output cancer effect analyses. Minor/major updates may change outputs due bug fixes intentional tweaks, described version notes.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-264","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.6.4","title":"cancereffectsizeR 2.6.4","text":"load_maf(): Optional maf_name argument makes easy see samples CESAnalysis come MAF. flexible support user-supplied gene mutation rates. Changed par_init selection inference ces_variant()’s default model. change cause trivially small differences effect estimates prior versions. Various small fixes.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-263","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.6.3","title":"cancereffectsizeR 2.6.3","text":"vcfs_to_maf_table(): Read VCF files somatic variant calling pipelines convert combined MAF-like data.table. Removed sequential model selection pending improvements methodology. Improved user guidance get_TCGA_project_MAF().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-262","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.6.2","title":"cancereffectsizeR 2.6.2","text":"Miscellaneous minor improvements, including better handling chromosome naming styles.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-261","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.6.1","title":"cancereffectsizeR 2.6.1","text":"Compatibility fix Windows systems. Bug fixes features introduced 2.6.0.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-260","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.6.0","title":"cancereffectsizeR 2.6.0","text":"get_TCGA_project_MAF(): Conveniently download MAF data Genomic Data Commons create MAF files covering full TCGA projects. Change relative trinucleotide mutation rate calculation low-mutation samples consistency samples. Impact change typically small. ces_gene_epistasis() now accepts list gene pairs analyze. Conversion adjacent SNVs DBS/MNV moved load_maf() preload_maf(), now optional (typically recommended).","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-250","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.5.0","title":"cancereffectsizeR 2.5.0","text":"Fixed bug combining WGS data generic WXS data (without specific coverage definitions) resulted variants annotated exonic.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-240","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.4.0","title":"cancereffectsizeR 2.4.0","text":"ces_gene_epistasis() gains variants argument customize variants gene used epistasis inference. Gene mutation rate estimates now come 95% confidence intervals. add_variants() can now used load annotations amino-acid-changing substitutions CESAnalysis. Fixed bug create_refset() caused custom reference data sets incorrect values gene trinucleotide proportions (gene_trinuc_comp). Added utility functions clear_effect_output() clear_epistasis_output().","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-234","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.3.4","title":"cancereffectsizeR 2.3.4","text":"New website expanded tutorial. Small fixes, including tweak variant prioritization.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-233","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.3.3","title":"cancereffectsizeR 2.3.3","text":"New quickstart instructions website, new tutorial progress. See site latest version, continue updated. simplicity, load_maf() longer supports non-standard MAF column names genome assembly conversion. Instead,call preload_maf() first prep data. Renamed function: suggest_cosmic_signature_exclusions() replaces suggest_cosmic_signatures_to_remove(), related argument trinuc_mutation_rates() now signature_exclusions. Small fixes tweaks.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-231","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.3.1","title":"cancereffectsizeR 2.3.1","text":"ces_variant() output includes, input variant, number samples included inference number samples variant. (various reasons, including default exclusion samples -gene variants, total number samples given selection inference can less number samples data set.) Miscellaneous small improvements fixes.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-230","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.3.0","title":"cancereffectsizeR 2.3.0","text":"Load sample-level data CESAnalysis sample table using add_sample_data(), load_maf() new sample_data_cols argument. trinuc_mutation_rates(), gene_mutation_rates(), selection inference functions can run arbitrary subsets samples. less-flexible CESAnalysis “sample_groups” functionality deprecated. samples_with() makes easy see samples various mutations. variant_counts() provides variant prevalence coverage information, option break counts groups based sample table columns. check_sample_overlap() now accepts list MAFs. loaded MAF data, columns top_consequence top_gene give significant annotated coding changes mutation record. Annotation precedence determined MAF prevalence (usually equal), essential splice status, premature stop codon, nonsilent status, MAF mutation prevalence across transcript (often favors longer transcripts), finally alphabetical order. columns recalculated data loaded, changes MAF prevalence can change variants appear. ces.refset.hg38 now available, CESAnalysis() preload_maf() now require reference data sets specified user (formerly, defaulted ces.refset.hg19).","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-222","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.2.2","title":"cancereffectsizeR 2.2.2","text":"View dNdScv results easily, support passing custom parameters dNdScv. Simplified signature output two tables: “raw attributions” “biological weights” (see docs). Miscellaneous small fixes improvements.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-221","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.2.1","title":"cancereffectsizeR 2.2.1","text":"Reorganization signature weights data raw_weights, adjusted_weights, biological_weights. Raw weights come straight signature extraction. Variant annotation optimized better performance large data sets. Fixes preload_maf/load_maf usability issues.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-220","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.2.0","title":"cancereffectsizeR 2.2.0","text":"Support using MutationalPatterns signature extraction. MutationalPatterns fit_to_signatures_strict method now default used trinuc_mutation_rates(). Helper function trinuc_snv_counts eases exploratory signature analysis, counts used internally trinuc_mutation_rates() now viewable. convert_signature_weights_for_mp() makes easy input mutational signature weights MutationalPatterns functions, visualizations. Custom reference data sets can now contain multiple transcripts per gene. Fixed bug inflated selection intensities noncoding SNVs using default model/workflow.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-214","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.1.4","title":"cancereffectsizeR 2.1.4","text":"Minor fixes improvements.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-213","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.1.3","title":"cancereffectsizeR 2.1.3","text":"Improvements liftOver support. preload_maf() gives information problematic records.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-212","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.1.2","title":"cancereffectsizeR 2.1.2","text":"load_maf() detects adjacent SNV records re-annotates doublet base substitutions; improved annotation insertions, deletions, complex multi-nucleotide variants. Performance improvements minor bug fixes.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-211","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.1.1","title":"cancereffectsizeR 2.1.1","text":"Minor improvements documentation updates.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-210","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.1.0","title":"cancereffectsizeR 2.1.0","text":"Simple workflow building custom tissue covariates data, inform calculation gene mutation rates. preload_maf() detects problems MAF data informs quality filtering records. check_sample_overlap() offers simple way spotting possible sample duplicates. Bug fixes.","code":""},{"path":"https://townsend-lab-yale.github.io/cancereffectsizeR/news/index.html","id":"cancereffectsizer-200","dir":"Changelog","previous_headings":"","what":"cancereffectsizeR 2.0.0","title":"cancereffectsizeR 2.0.0","text":"Supports targeted, whole-exome, whole-genome sequencing data proper handling covered regions. Define sample groups run analyses different parameters group. Provides powerful flexible mutation rate calculation methods; also support loading arbitrary rates. Supports arbitrary genome/reference information, tools building custom reference data sets (refsets). Reference data separated package (see ces.refset.hg19). Supports signature extraction built-custom SNV signature definitions. Adds model stage/grade-specific variant selection models variant- gene-level epistatic selection. Variant annotations revamped new functions assist filtering variants viewing annotations. Collections variants can batched “compound variants” treated like single variants. Variant effect sizes can visualized plotting functionality. Save, share, reload entire analyses. Numerous performance usability improvements.","code":""}]
